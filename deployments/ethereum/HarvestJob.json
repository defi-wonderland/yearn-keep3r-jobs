{
  "address": "0x220a85bCd2212ab0b27EFd0de8b5e03175f0adee",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mechanicsRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stealthRelayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_v2Keeper",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_workCooldown",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_keep3r",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_keep3rHelper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bond",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minBond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_earned",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_age",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_onlyEOA",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "KeeperNotValid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxMultiplier",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoChangeInPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyEOA",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyGovernorOrMechanic",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPendingGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyStealthRelayer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Paused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyNotAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyNotWorkable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroCooldown",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "ForceWorked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_gasBonus",
          "type": "uint256"
        }
      ],
      "name": "GasBonusSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_initialGas",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_gasAfterWork",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_bonus",
          "type": "uint256"
        }
      ],
      "name": "GasMetered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_gasMultiplier",
          "type": "uint256"
        }
      ],
      "name": "GasMultiplierSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_keep3rHelper",
          "type": "address"
        }
      ],
      "name": "Keep3rHelperSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_bond",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minBond",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_earned",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_age",
          "type": "uint256"
        }
      ],
      "name": "Keep3rRequirementsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_keep3r",
          "type": "address"
        }
      ],
      "name": "Keep3rSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "KeeperWorked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_maxMultiplier",
          "type": "uint256"
        }
      ],
      "name": "MaxMultiplierSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_onlyEOA",
          "type": "bool"
        }
      ],
      "name": "OnlyEOASet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "PauseSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pendingGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_stealthRelayer",
          "type": "address"
        }
      ],
      "name": "StealthRelayerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_requiredAmount",
          "type": "uint256"
        }
      ],
      "name": "StrategyAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_requiredAmount",
          "type": "uint256"
        }
      ],
      "name": "StrategyModified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "StrategyRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptPendingGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_strategies",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_requiredAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "addStrategies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_requiredAmount",
          "type": "uint256"
        }
      ],
      "name": "addStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "forceWork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "forceWorkUnsafe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mechanic",
          "type": "address"
        }
      ],
      "name": "isMechanic",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isMechanic",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keep3r",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keep3rHelper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastWorkAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mechanicsRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "_mechanicRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onlyEOA",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "removeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredAge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "requiredAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredBond",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredEarnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredMinBond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gasBonus",
          "type": "uint256"
        }
      ],
      "name": "setGasBonus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gasMultiplier",
          "type": "uint256"
        }
      ],
      "name": "setGasMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keep3r",
          "type": "address"
        }
      ],
      "name": "setKeep3r",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keep3rHelper",
          "type": "address"
        }
      ],
      "name": "setKeep3rHelper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bond",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minBond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_earned",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_age",
          "type": "uint256"
        }
      ],
      "name": "setKeep3rRequirements",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxMultiplier",
          "type": "uint256"
        }
      ],
      "name": "setMaxMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mechanicsRegistry",
          "type": "address"
        }
      ],
      "name": "setMechanicsRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_onlyEOA",
          "type": "bool"
        }
      ],
      "name": "setOnlyEOA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pendingGovernor",
          "type": "address"
        }
      ],
      "name": "setPendingGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stealthRelayer",
          "type": "address"
        }
      ],
      "name": "setStealthRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_v2Keeper",
          "type": "address"
        }
      ],
      "name": "setV2Keeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_workCooldown",
          "type": "uint256"
        }
      ],
      "name": "setWorkCooldown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stealthRelayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategies",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_strategies",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_requiredAmount",
          "type": "uint256"
        }
      ],
      "name": "updateRequiredAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_strategies",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_requiredAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "updateRequiredAmounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "v2Keeper",
      "outputs": [
        {
          "internalType": "contract IV2Keeper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "work",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "workCooldown",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "workable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isWorkable",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x64ad32a1c259955f4b5fcab1bf5433fc5cf222bce2e5c0643e362f8140f57f85",
  "receipt": {
    "to": null,
    "from": "0x5FcdC32DfC361a32e9d5AB9A384b890C62D0b8AC",
    "contractAddress": "0x220a85bCd2212ab0b27EFd0de8b5e03175f0adee",
    "transactionIndex": 87,
    "gasUsed": "1952781",
    "logsBloom": "0x
    "blockHash": "0x8b50a9b43dda9ae0b012da2377f04cedb00bc4643f0f14d671ed6fcfa7e67fba",
    "transactionHash": "0x64ad32a1c259955f4b5fcab1bf5433fc5cf222bce2e5c0643e362f8140f57f85",
    "logs": [
      {
        "transactionIndex": 87,
        "blockNumber": 15632487,
        "transactionHash": "0x64ad32a1c259955f4b5fcab1bf5433fc5cf222bce2e5c0643e362f8140f57f85",
        "address": "0x220a85bCd2212ab0b27EFd0de8b5e03175f0adee",
        "topics": [
          "0x0fec338132ef1fa68cd11242357e5e5e5af67dfd0c957b53ef411bca535817ef"
        ],
        "data": "0x000000000000000000000000eb02addcfd8b773a5ffa6b9d1fe99c566f8c44cc",
        "logIndex": 221,
        "blockHash": "0x8b50a9b43dda9ae0b012da2377f04cedb00bc4643f0f14d671ed6fcfa7e67fba"
      },
      {
        "transactionIndex": 87,
        "blockNumber": 15632487,
        "transactionHash": "0x64ad32a1c259955f4b5fcab1bf5433fc5cf222bce2e5c0643e362f8140f57f85",
        "address": "0x220a85bCd2212ab0b27EFd0de8b5e03175f0adee",
        "topics": [
          "0x77e14ebc8982ca2b21d8410b77a6ca8a857864dfab5d337f154fbacea73c1191"
        ],
        "data": "0x000000000000000000000000edde080e28eb53532bd1804de51bd9cd5cadf0d4",
        "logIndex": 222,
        "blockHash": "0x8b50a9b43dda9ae0b012da2377f04cedb00bc4643f0f14d671ed6fcfa7e67fba"
      },
      {
        "transactionIndex": 87,
        "blockNumber": 15632487,
        "transactionHash": "0x64ad32a1c259955f4b5fcab1bf5433fc5cf222bce2e5c0643e362f8140f57f85",
        "address": "0x220a85bCd2212ab0b27EFd0de8b5e03175f0adee",
        "topics": [
          "0x4803a65acc131d65526972ad19dbfa7490ed1f24f6ece0c71f4898d86a01b69b"
        ],
        "data": "0x0000000000000000000000000a61c2146a7800bdc278833f21ebf56cd660ee2a",
        "logIndex": 223,
        "blockHash": "0x8b50a9b43dda9ae0b012da2377f04cedb00bc4643f0f14d671ed6fcfa7e67fba"
      },
      {
        "transactionIndex": 87,
        "blockNumber": 15632487,
        "transactionHash": "0x64ad32a1c259955f4b5fcab1bf5433fc5cf222bce2e5c0643e362f8140f57f85",
        "address": "0x220a85bCd2212ab0b27EFd0de8b5e03175f0adee",
        "topics": [
          "0xadc260414d0381ec9727c6f819aa0ebe789ad81016c176765f40d3bc301e5d6b"
        ],
        "data": "0x0000000000000000000000001ceb5cb57c4d4e2b2433641b95dd330a33185a44000000000000000000000000000000000000000000000002b5e3af16b188000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 224,
        "blockHash": "0x8b50a9b43dda9ae0b012da2377f04cedb00bc4643f0f14d671ed6fcfa7e67fba"
      },
      {
        "transactionIndex": 87,
        "blockNumber": 15632487,
        "transactionHash": "0x64ad32a1c259955f4b5fcab1bf5433fc5cf222bce2e5c0643e362f8140f57f85",
        "address": "0x220a85bCd2212ab0b27EFd0de8b5e03175f0adee",
        "topics": [
          "0xa9bf0ee725a8887f07a03c36e33aa100bb0218d44b9fff855be8504c480ab99b"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 225,
        "blockHash": "0x8b50a9b43dda9ae0b012da2377f04cedb00bc4643f0f14d671ed6fcfa7e67fba"
      },
      {
        "transactionIndex": 87,
        "blockNumber": 15632487,
        "transactionHash": "0x64ad32a1c259955f4b5fcab1bf5433fc5cf222bce2e5c0643e362f8140f57f85",
        "address": "0x220a85bCd2212ab0b27EFd0de8b5e03175f0adee",
        "topics": [
          "0x6c434ba0e7a3588c2330d8f479f247d9269f069a8d630dbb2cb60a7382a487f0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000022f60",
        "logIndex": 226,
        "blockHash": "0x8b50a9b43dda9ae0b012da2377f04cedb00bc4643f0f14d671ed6fcfa7e67fba"
      },
      {
        "transactionIndex": 87,
        "blockNumber": 15632487,
        "transactionHash": "0x64ad32a1c259955f4b5fcab1bf5433fc5cf222bce2e5c0643e362f8140f57f85",
        "address": "0x220a85bCd2212ab0b27EFd0de8b5e03175f0adee",
        "topics": [
          "0x2985ceccbff6f8695faca980a17eb9a590d2f080d024f944d3c7743ba038c399"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000002134",
        "logIndex": 227,
        "blockHash": "0x8b50a9b43dda9ae0b012da2377f04cedb00bc4643f0f14d671ed6fcfa7e67fba"
      }
    ],
    "blockNumber": 15632487,
    "cumulativeGasUsed": "10892440",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2c01b4ad51a67e2d8f02208f54df9ac4c0b778b6",
    "0xe8d5a85758fe98f7dce251cad552691d49b499bb",
    "0x0a61c2146a7800bdc278833f21ebf56cd660ee2a",
    "0x736d7e3c5a6cb2ce3b764300140abf476f6cfccf",
    21600,
    "0xeb02addCfD8B773A5FFA6B9d1FE99c566f8c44CC",
    "0xeDDe080E28Eb53532bD1804de51BD9Cd5cADF0d4",
    "0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44",
    "50000000000000000000",
    0,
    0,
    true
  ],
  "numDeployments": 2,
  "solcInputHash": "484a2ce5c16a9165290bdc8c99a4f2fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mechanicsRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stealthRelayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_v2Keeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_workCooldown\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_keep3r\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keep3rHelper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bond\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_onlyEOA\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"KeeperNotValid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxMultiplier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoChangeInPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyEOA\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyGovernorOrMechanic\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPendingGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyStealthRelayer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Paused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyNotAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyNotWorkable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroCooldown\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"ForceWorked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_gasBonus\",\"type\":\"uint256\"}],\"name\":\"GasBonusSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_initialGas\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_gasAfterWork\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"GasMetered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_gasMultiplier\",\"type\":\"uint256\"}],\"name\":\"GasMultiplierSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_keep3rHelper\",\"type\":\"address\"}],\"name\":\"Keep3rHelperSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_bond\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minBond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_earned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"}],\"name\":\"Keep3rRequirementsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_keep3r\",\"type\":\"address\"}],\"name\":\"Keep3rSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"KeeperWorked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxMultiplier\",\"type\":\"uint256\"}],\"name\":\"MaxMultiplierSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_onlyEOA\",\"type\":\"bool\"}],\"name\":\"OnlyEOASet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"PauseSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stealthRelayer\",\"type\":\"address\"}],\"name\":\"StealthRelayerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requiredAmount\",\"type\":\"uint256\"}],\"name\":\"StrategyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requiredAmount\",\"type\":\"uint256\"}],\"name\":\"StrategyModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_requiredAmounts\",\"type\":\"uint256[]\"}],\"name\":\"addStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requiredAmount\",\"type\":\"uint256\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"forceWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"forceWorkUnsafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mechanic\",\"type\":\"address\"}],\"name\":\"isMechanic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isMechanic\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keep3r\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keep3rHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastWorkAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mechanicsRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_mechanicRegistry\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyEOA\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"requiredAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredBond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredMinBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasBonus\",\"type\":\"uint256\"}],\"name\":\"setGasBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasMultiplier\",\"type\":\"uint256\"}],\"name\":\"setGasMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keep3r\",\"type\":\"address\"}],\"name\":\"setKeep3r\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keep3rHelper\",\"type\":\"address\"}],\"name\":\"setKeep3rHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bond\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"}],\"name\":\"setKeep3rRequirements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxMultiplier\",\"type\":\"uint256\"}],\"name\":\"setMaxMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mechanicsRegistry\",\"type\":\"address\"}],\"name\":\"setMechanicsRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_onlyEOA\",\"type\":\"bool\"}],\"name\":\"setOnlyEOA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"setPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stealthRelayer\",\"type\":\"address\"}],\"name\":\"setStealthRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_v2Keeper\",\"type\":\"address\"}],\"name\":\"setV2Keeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_workCooldown\",\"type\":\"uint256\"}],\"name\":\"setWorkCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stealthRelayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requiredAmount\",\"type\":\"uint256\"}],\"name\":\"updateRequiredAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_requiredAmounts\",\"type\":\"uint256[]\"}],\"name\":\"updateRequiredAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v2Keeper\",\"outputs\":[{\"internalType\":\"contract IV2Keeper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"work\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"workable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isWorkable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addStrategies(address[],uint256[])\":{\"params\":{\"_requiredAmount\":\"Array of amount of gas that each strategy requires to execute\",\"_strategies\":\"Array of addresses of strategies to add\"}},\"addStrategy(address,uint256)\":{\"params\":{\"_requiredAmount\":\"Amount of gas that the strategy requires to execute\",\"_strategy\":\"Address of the strategy to add\"}},\"forceWork(address)\":{\"params\":{\"_strategy\":\"Address of the strategy to be worked\"}},\"forceWorkUnsafe(address)\":{\"params\":{\"_strategy\":\"Address of the strategy to be worked\"}},\"removeStrategy(address)\":{\"params\":{\"_strategy\":\"Address of the strategy to remove\"}},\"setGasBonus(uint256)\":{\"params\":{\"_gasBonus\":\"New amount of gas to add to cover unaccounted gas\"}},\"setGasMultiplier(uint256)\":{\"params\":{\"_gasMultiplier\":\"New multiplier that boosts gas record to calculate the keeper reward\"}},\"setKeep3r(address)\":{\"params\":{\"_keep3r\":\"Address of the new Keep3r contract\"}},\"setKeep3rHelper(address)\":{\"params\":{\"_keep3rHelper\":\"Address of the new Keep3rHelper contract\"}},\"setKeep3rRequirements(address,uint256,uint256,uint256)\":{\"params\":{\"_age\":\"Amount of seconds since keeper registration required to work the job\",\"_bond\":\"Address of the token required to bond to work the job\",\"_earned\":\"Amount of KP3R earnings required to work the job\",\"_minBond\":\"Amount of tokens required to bond to work the job\"}},\"setMaxMultiplier(uint256)\":{\"params\":{\"_maxMultiplier\":\"New maximum acceptable gasMultiplier to be set\"}},\"setMechanicsRegistry(address)\":{\"params\":{\"_mechanicsRegistry\":\"Address of the new MechanicsRegistry contract\"}},\"setOnlyEOA(bool)\":{\"params\":{\"_onlyEOA\":\"Whether the keeper is required to be an EOA or not\"}},\"setPause(bool)\":{\"params\":{\"_paused\":\"Whether the contract should be paused or not\"}},\"setPendingGovernor(address)\":{\"params\":{\"_pendingGovernor\":\"Address of the proposed new governor\"}},\"setStealthRelayer(address)\":{\"params\":{\"_stealthRelayer\":\"Address of the new StealthRelayer contract\"}},\"setV2Keeper(address)\":{\"params\":{\"_v2Keeper\":\"Address of the new v2Keeper to set\"}},\"setWorkCooldown(uint256)\":{\"params\":{\"_workCooldown\":\"Amount of seconds to wait until a strategy can be worked again\"}},\"strategies()\":{\"returns\":{\"_strategies\":\"List of added strategies\"}},\"updateRequiredAmount(address,uint256)\":{\"params\":{\"_requiredAmount\":\"New amount of gas that te strategy requires to execute\",\"_strategy\":\"Address of the strategy to modify\"}},\"updateRequiredAmounts(address[],uint256[])\":{\"params\":{\"_requiredAmounts\":\"Array of new amounts of gas that each strategy requires to execute\",\"_strategies\":\"Array of addresses of strategies to modify\"}},\"work(address)\":{\"params\":{\"_strategy\":\"Address of the strategy to be worked\"}},\"workable(address)\":{\"params\":{\"_strategy\":\"Address of the strategy to query\"},\"returns\":{\"_isWorkable\":\"Whether the queried strategy is workable or not\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"KeeperNotValid()\":[{\"notice\":\"Throws when a keeper fails the validation\"}],\"NoChangeInPause()\":[{\"notice\":\"Throws when governor tries to switch pause to the same state as before\"}],\"OnlyEOA()\":[{\"notice\":\"Throws when keeper is not tx.origin\"}],\"OnlyGovernor()\":[{\"notice\":\"Throws if a non-governor user tries to call a OnlyGovernor function\"}],\"OnlyGovernorOrMechanic()\":[{\"notice\":\"Throws when a OnlyGovernorOrMechanic function is called from an unknown address\"}],\"OnlyPendingGovernor()\":[{\"notice\":\"Throws if a non-pending-governor user tries to call a OnlyPendingGovernor function\"}],\"OnlyStealthRelayer()\":[{\"notice\":\"Throws when a OnlyStealthRelayer function is called from an unknown address\"}],\"Paused()\":[{\"notice\":\"Throws when a keeper tries to work a paused contract\"}],\"StrategyAlreadyAdded()\":[{\"notice\":\"Throws if the strategy being added has already been added\"}],\"StrategyNotAdded()\":[{\"notice\":\"Throws if the strategy being summoned is not added\"}],\"StrategyNotWorkable()\":[{\"notice\":\"Throws if a keeper tries to work a non-workable strategy\"}],\"WrongLengths()\":[{\"notice\":\"Throws if a set of correlated input param arrays differ in lengths\"}],\"ZeroAddress()\":[{\"notice\":\"Throws if a variable is assigned to the zero address\"}],\"ZeroCooldown()\":[{\"notice\":\"Throws if the cooldown is being set to 0\"}]},\"events\":{\"ForceWorked(address)\":{\"notice\":\"Emitted when a strategy is force-worked by governor or mechanic\"},\"GasBonusSet(uint256)\":{\"notice\":\"Emitted when a new gas bonus amount is set\"},\"GasMetered(uint256,uint256,uint256)\":{\"notice\":\"Emitted when a metered job is worked\"},\"GasMultiplierSet(uint256)\":{\"notice\":\"Emitted when a new gas bonus multiplier is set\"},\"Keep3rHelperSet(address)\":{\"notice\":\"Emitted when a new Keep3rHelper contract is set\"},\"Keep3rRequirementsSet(address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when a new set of requirements is set\"},\"Keep3rSet(address)\":{\"notice\":\"Emitted when a new Keep3r contract is set\"},\"KeeperWorked(address)\":{\"notice\":\"Emitted when a strategy is worked\"},\"MaxMultiplierSet(uint256)\":{\"notice\":\"Emitted when a new gas bonus multiplier maximum is set\"},\"OnlyEOASet(bool)\":{\"notice\":\"Emitted when onlyEOA is set\"},\"PauseSet(bool)\":{\"notice\":\"Emitted when the contract pause is switched\"},\"PendingGovernorAccepted(address)\":{\"notice\":\"Emitted when a new governor is set\"},\"PendingGovernorSet(address,address)\":{\"notice\":\"Emitted when a new pending governor is set\"},\"StealthRelayerSet(address)\":{\"notice\":\"Emitted when a new StealthRelayer contract is set\"},\"StrategyAdded(address,uint256)\":{\"notice\":\"Emitted when a new strategy is added\"},\"StrategyModified(address,uint256)\":{\"notice\":\"Emitted when a strategy is modified\"},\"StrategyRemoved(address)\":{\"notice\":\"Emitted when a strategy is removed\"}},\"kind\":\"user\",\"methods\":{\"acceptPendingGovernor()\":{\"notice\":\"Allows a proposed governor to accept the governance\"},\"forceWork(address)\":{\"notice\":\"Function to be called by governor or mechanics that triggers the execution of the given strategyThis function bypasses the workable checks\"},\"forceWorkUnsafe(address)\":{\"notice\":\"Function to be called by governor or mechanic that triggers the execution of the given strategyThis function bypasses the stealth relayer checks\"},\"setGasBonus(uint256)\":{\"notice\":\"Allows governor to set a new gas bonus amount\"},\"setGasMultiplier(uint256)\":{\"notice\":\"Allows governor to set a new gas multiplier\"},\"setKeep3r(address)\":{\"notice\":\"Allows governor to set a new Keep3r contract\"},\"setKeep3rHelper(address)\":{\"notice\":\"Allows governor to set a new Keep3rHelper contract\"},\"setKeep3rRequirements(address,uint256,uint256,uint256)\":{\"notice\":\"Allows the governor to set new requirements to work the job\"},\"setMaxMultiplier(uint256)\":{\"notice\":\"Allows governor to set a new gas multiplier maximum\"},\"setMechanicsRegistry(address)\":{\"notice\":\"Allows governor to set a new MechanicsRegistry contract\"},\"setOnlyEOA(bool)\":{\"notice\":\"Allows governor to set the onlyEOA condition\"},\"setPause(bool)\":{\"notice\":\"Allows governor to pause or unpause the contract\"},\"setPendingGovernor(address)\":{\"notice\":\"Allows a governor to propose a new governor\"},\"setStealthRelayer(address)\":{\"notice\":\"Allows governor to set a new StealthRelayer contract\"},\"work(address)\":{\"notice\":\"Function to be called by the keeper that triggers the execution of the given strategy\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/contracts/HarvestV2Keep3rStealthJob.sol\":\"HarvestV2Keep3rStealthJob\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xacac2065b3ed1facff1163435890d4a6bcdc474e857e8e2c91ae5fb50418f723\",\"license\":\"MIT\"},\"@yearn-mechanics/contract-utils/solidity/contracts/utils/Machinery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '../../interfaces/utils/IMachinery.sol';\\nimport '../../interfaces/mechanics/IMechanicsRegistry.sol';\\n\\ncontract Machinery is IMachinery {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  IMechanicsRegistry internal _mechanicsRegistry;\\n\\n  constructor(address __mechanicsRegistry) {\\n    _setMechanicsRegistry(__mechanicsRegistry);\\n  }\\n\\n  modifier onlyMechanic() {\\n    require(_mechanicsRegistry.isMechanic(msg.sender), 'Machinery: not mechanic');\\n    _;\\n  }\\n\\n  function setMechanicsRegistry(address __mechanicsRegistry) external virtual override {\\n    _setMechanicsRegistry(__mechanicsRegistry);\\n  }\\n\\n  function _setMechanicsRegistry(address __mechanicsRegistry) internal {\\n    _mechanicsRegistry = IMechanicsRegistry(__mechanicsRegistry);\\n  }\\n\\n  // View helpers\\n  function mechanicsRegistry() external view override returns (address _mechanicRegistry) {\\n    return address(_mechanicsRegistry);\\n  }\\n\\n  function isMechanic(address _mechanic) public view override returns (bool _isMechanic) {\\n    return _mechanicsRegistry.isMechanic(_mechanic);\\n  }\\n}\\n\",\"keccak256\":\"0x49791ab0a35781a64fbeb1fe15608d3ba149e73f66fdeeab9119855e188d2cc0\",\"license\":\"MIT\"},\"@yearn-mechanics/contract-utils/solidity/interfaces/mechanics/IMechanicsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface IMechanicsRegistry {\\n  event MechanicAdded(address _mechanic);\\n  event MechanicRemoved(address _mechanic);\\n\\n  function addMechanic(address _mechanic) external;\\n\\n  function removeMechanic(address _mechanic) external;\\n\\n  function mechanics() external view returns (address[] memory _mechanicsList);\\n\\n  function isMechanic(address mechanic) external view returns (bool _isMechanic);\\n}\\n\",\"keccak256\":\"0xea99a72ea91a0948f7aa3cee28a68848da56f9d3027aaa40ae37eb5e3046e0fd\",\"license\":\"MIT\"},\"@yearn-mechanics/contract-utils/solidity/interfaces/utils/IMachinery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface IMachinery {\\n  // View helpers\\n  function mechanicsRegistry() external view returns (address _mechanicsRegistry);\\n\\n  function isMechanic(address mechanic) external view returns (bool _isMechanic);\\n\\n  // Setters\\n  function setMechanicsRegistry(address _mechanicsRegistry) external;\\n}\\n\",\"keccak256\":\"0xdf1def1edf0114646cbb16bd56448a1317fc1f4616b121ab5d69d92b725a08ca\",\"license\":\"MIT\"},\"solidity/contracts/HarvestV2Keep3rStealthJob.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n\\nCoded for Yearn Finance with \\u2665 by\\n\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557\\u2003\\u2003\\u2591\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2551\\u2003\\u2003\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2551\\u2003\\u2003\\u2591\\u255a\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2591\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2591\\u2591\\u2588\\u2588\\u2551\\u2003\\u2003\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2554\\u2550\\u2588\\u2588\\u2588\\u2588\\u2551\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2591\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2003\\u2003\\u2591\\u2591\\u255a\\u2588\\u2588\\u2554\\u255d\\u2591\\u255a\\u2588\\u2588\\u2554\\u255d\\u2591\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u255a\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u255a\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2003\\u2003\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\n\\nhttps://defi.sucks\\n\\n*/\\n\\npragma solidity >=0.8.9 <0.9.0;\\n\\nimport './V2KeeperJob.sol';\\nimport './utils/Pausable.sol';\\nimport './utils/Keep3rMeteredStealthJob.sol';\\nimport '../interfaces/IV2Keep3rStealthJob.sol';\\n\\ncontract HarvestV2Keep3rStealthJob is IV2Keep3rStealthJob, V2KeeperJob, Pausable, Keep3rMeteredStealthJob {\\n  constructor(\\n    address _governor,\\n    address _mechanicsRegistry,\\n    address _stealthRelayer,\\n    address _v2Keeper,\\n    uint256 _workCooldown,\\n    address _keep3r,\\n    address _keep3rHelper,\\n    address _bond,\\n    uint256 _minBond,\\n    uint256 _earned,\\n    uint256 _age,\\n    bool _onlyEOA\\n  ) V2KeeperJob(_governor, _v2Keeper, _mechanicsRegistry, _workCooldown) {\\n    _setKeep3r(_keep3r);\\n    _setKeep3rHelper(_keep3rHelper);\\n    _setStealthRelayer(_stealthRelayer);\\n    _setKeep3rRequirements(_bond, _minBond, _earned, _age);\\n    _setOnlyEOA(_onlyEOA);\\n    _setGasBonus(143_200); // calculated fixed bonus to compensate unaccounted gas\\n    _setGasMultiplier((gasMultiplier * 850) / 1_000); // expected 15% refunded gas\\n  }\\n\\n  // views\\n\\n  /// @inheritdoc IV2KeeperJob\\n  function workable(address _strategy) external view returns (bool _isWorkable) {\\n    return _workable(_strategy);\\n  }\\n\\n  // methods\\n\\n  /// @inheritdoc IV2KeeperJob\\n  function work(address _strategy) external upkeepStealthy notPaused {\\n    _workInternal(_strategy);\\n  }\\n\\n  /// @inheritdoc IV2KeeperJob\\n  function forceWork(address _strategy) external onlyStealthRelayer {\\n    address _caller = IStealthRelayer(stealthRelayer).caller();\\n    _validateGovernorOrMechanic(_caller);\\n    _forceWork(_strategy);\\n  }\\n\\n  /// @inheritdoc IV2Keep3rStealthJob\\n  function forceWorkUnsafe(address _strategy) external onlyGovernorOrMechanic {\\n    _forceWork(_strategy);\\n  }\\n\\n  // internals\\n\\n  function _workable(address _strategy) internal view override returns (bool _isWorkable) {\\n    if (!super._workable(_strategy)) return false;\\n    return IBaseStrategy(_strategy).harvestTrigger(_getCallCosts(_strategy));\\n  }\\n\\n  function _work(address _strategy) internal override {\\n    v2Keeper.harvest(_strategy);\\n  }\\n}\\n\",\"keccak256\":\"0xc8848776bcdd1dc5de84964e9dcb747766f511c4d723ab8eddb7502d7dce733d\",\"license\":\"MIT\"},\"solidity/contracts/V2KeeperJob.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.9 <0.9.0;\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\nimport './utils/GasBaseFee.sol';\\nimport './utils/MachineryReady.sol';\\nimport '../interfaces/IV2KeeperJob.sol';\\nimport '../interfaces/external/IV2Keeper.sol';\\nimport '../interfaces/external/IBaseStrategy.sol';\\n\\nabstract contract V2KeeperJob is IV2KeeperJob, MachineryReady, GasBaseFee {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  /// @inheritdoc IV2KeeperJob\\n  IV2Keeper public v2Keeper;\\n\\n  EnumerableSet.AddressSet internal _availableStrategies;\\n  /// @inheritdoc IV2KeeperJob\\n  mapping(address => uint256) public requiredAmount;\\n  /// @inheritdoc IV2KeeperJob\\n  mapping(address => uint256) public lastWorkAt;\\n  /// @inheritdoc IV2KeeperJob\\n  uint256 public workCooldown;\\n\\n  constructor(\\n    address _governor,\\n    address _v2Keeper,\\n    address _mechanicsRegistry,\\n    uint256 _workCooldown\\n  ) Governable(_governor) MachineryReady(_mechanicsRegistry) {\\n    v2Keeper = IV2Keeper(_v2Keeper);\\n    if (_workCooldown > 0) _setWorkCooldown(_workCooldown);\\n  }\\n\\n  // views\\n\\n  /// @inheritdoc IV2KeeperJob\\n  function strategies() public view returns (address[] memory _strategies) {\\n    _strategies = new address[](_availableStrategies.length());\\n    for (uint256 _i; _i < _availableStrategies.length(); _i++) {\\n      _strategies[_i] = _availableStrategies.at(_i);\\n    }\\n  }\\n\\n  // setters\\n\\n  /// @inheritdoc IV2KeeperJob\\n  function setV2Keeper(address _v2Keeper) external onlyGovernor {\\n    _setV2Keeper(_v2Keeper);\\n  }\\n\\n  /// @inheritdoc IV2KeeperJob\\n  function setWorkCooldown(uint256 _workCooldown) external onlyGovernorOrMechanic {\\n    _setWorkCooldown(_workCooldown);\\n  }\\n\\n  /// @inheritdoc IV2KeeperJob\\n  function addStrategy(address _strategy, uint256 _requiredAmount) external onlyGovernorOrMechanic {\\n    _addStrategy(_strategy, _requiredAmount);\\n  }\\n\\n  /// @inheritdoc IV2KeeperJob\\n  function addStrategies(address[] calldata _strategies, uint256[] calldata _requiredAmounts) external onlyGovernorOrMechanic {\\n    if (_strategies.length != _requiredAmounts.length) revert WrongLengths();\\n    for (uint256 _i; _i < _strategies.length; _i++) {\\n      _addStrategy(_strategies[_i], _requiredAmounts[_i]);\\n    }\\n  }\\n\\n  /// @inheritdoc IV2KeeperJob\\n  function updateRequiredAmount(address _strategy, uint256 _requiredAmount) external onlyGovernorOrMechanic {\\n    _updateRequiredAmount(_strategy, _requiredAmount);\\n  }\\n\\n  /// @inheritdoc IV2KeeperJob\\n  function updateRequiredAmounts(address[] calldata _strategies, uint256[] calldata _requiredAmounts) external onlyGovernorOrMechanic {\\n    if (_strategies.length != _requiredAmounts.length) revert WrongLengths();\\n    for (uint256 _i; _i < _strategies.length; _i++) {\\n      _updateRequiredAmount(_strategies[_i], _requiredAmounts[_i]);\\n    }\\n  }\\n\\n  /// @inheritdoc IV2KeeperJob\\n  function removeStrategy(address _strategy) external onlyGovernorOrMechanic {\\n    _removeStrategy(_strategy);\\n  }\\n\\n  // internals\\n\\n  function _setV2Keeper(address _v2Keeper) internal {\\n    v2Keeper = IV2Keeper(_v2Keeper);\\n  }\\n\\n  function _setWorkCooldown(uint256 _workCooldown) internal {\\n    if (_workCooldown == 0) revert ZeroCooldown();\\n    workCooldown = _workCooldown;\\n  }\\n\\n  function _addStrategy(address _strategy, uint256 _requiredAmount) internal {\\n    if (_availableStrategies.contains(_strategy)) revert StrategyAlreadyAdded();\\n    _setRequiredAmount(_strategy, _requiredAmount);\\n    emit StrategyAdded(_strategy, _requiredAmount);\\n    _availableStrategies.add(_strategy);\\n  }\\n\\n  function _updateRequiredAmount(address _strategy, uint256 _requiredAmount) internal {\\n    if (!_availableStrategies.contains(_strategy)) revert StrategyNotAdded();\\n    _setRequiredAmount(_strategy, _requiredAmount);\\n    emit StrategyModified(_strategy, _requiredAmount);\\n  }\\n\\n  function _removeStrategy(address _strategy) internal {\\n    if (!_availableStrategies.contains(_strategy)) revert StrategyNotAdded();\\n    delete requiredAmount[_strategy];\\n    _availableStrategies.remove(_strategy);\\n    emit StrategyRemoved(_strategy);\\n  }\\n\\n  function _setRequiredAmount(address _strategy, uint256 _requiredAmount) internal {\\n    requiredAmount[_strategy] = _requiredAmount;\\n  }\\n\\n  function _workable(address _strategy) internal view virtual returns (bool) {\\n    if (!_availableStrategies.contains(_strategy)) revert StrategyNotAdded();\\n    if (workCooldown == 0 || block.timestamp > lastWorkAt[_strategy] + workCooldown) return true;\\n    return false;\\n  }\\n\\n  function _getCallCosts(address _strategy) internal view returns (uint256 _callCost) {\\n    uint256 _gasAmount = requiredAmount[_strategy];\\n    if (_gasAmount == 0) return 0;\\n    return _gasAmount * _gasPrice();\\n  }\\n\\n  function _workInternal(address _strategy) internal {\\n    if (!_workable(_strategy)) revert StrategyNotWorkable();\\n    lastWorkAt[_strategy] = block.timestamp;\\n    _work(_strategy);\\n    emit KeeperWorked(_strategy);\\n  }\\n\\n  function _forceWork(address _strategy) internal {\\n    _work(_strategy);\\n    emit ForceWorked(_strategy);\\n  }\\n\\n  /// @dev This function should be implemented on the base contract\\n  function _work(address _strategy) internal virtual {}\\n}\\n\",\"keccak256\":\"0xfd84f5313f9ce7c162f686ce05df0224da97f3238351ef28f4cdd97290fad598\",\"license\":\"MIT\"},\"solidity/contracts/utils/GasBaseFee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.9 <0.9.0;\\n\\nabstract contract GasBaseFee {\\n  // internals\\n  function _gasPrice() internal view virtual returns (uint256) {\\n    return block.basefee;\\n  }\\n}\\n\",\"keccak256\":\"0xd45033f9ccdb76016847fbcedb1e7239cce4c26c91523ff2614ae2c79f1fb10b\",\"license\":\"MIT\"},\"solidity/contracts/utils/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9 <0.9.0;\\n\\nimport '../../interfaces/utils/IGovernable.sol';\\n\\nabstract contract Governable is IGovernable {\\n  /// @inheritdoc IGovernable\\n  address public governor;\\n  /// @inheritdoc IGovernable\\n  address public pendingGovernor;\\n\\n  constructor(address _governor) {\\n    if (_governor == address(0)) revert ZeroAddress();\\n    governor = _governor;\\n  }\\n\\n  // methods\\n\\n  /// @inheritdoc IGovernable\\n  function setPendingGovernor(address _pendingGovernor) external onlyGovernor {\\n    _setPendingGovernor(_pendingGovernor);\\n  }\\n\\n  /// @inheritdoc IGovernable\\n  function acceptPendingGovernor() external onlyPendingGovernor {\\n    _acceptPendingGovernor();\\n  }\\n\\n  // modifiers\\n\\n  modifier onlyGovernor() {\\n    if (msg.sender != governor) revert OnlyGovernor();\\n    _;\\n  }\\n\\n  modifier onlyPendingGovernor() {\\n    if (msg.sender != pendingGovernor) revert OnlyPendingGovernor();\\n    _;\\n  }\\n\\n  // internals\\n\\n  function _setPendingGovernor(address _pendingGovernor) internal {\\n    if (_pendingGovernor == address(0)) revert ZeroAddress();\\n    pendingGovernor = _pendingGovernor;\\n    emit PendingGovernorSet(governor, pendingGovernor);\\n  }\\n\\n  function _acceptPendingGovernor() internal {\\n    governor = pendingGovernor;\\n    pendingGovernor = address(0);\\n    emit PendingGovernorAccepted(governor);\\n  }\\n}\\n\",\"keccak256\":\"0x94045bada4410a21ed5f4bd633bee19657725bb4af54db261a7e465c186870e8\",\"license\":\"MIT\"},\"solidity/contracts/utils/Keep3rBondedJob.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9 <0.9.0;\\n\\nimport './Keep3rJob.sol';\\nimport '../../interfaces/utils/IKeep3rBondedJob.sol';\\n\\nabstract contract Keep3rBondedJob is IKeep3rBondedJob, Keep3rJob {\\n  /// @inheritdoc IKeep3rBondedJob\\n  address public requiredBond = 0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44;\\n  /// @inheritdoc IKeep3rBondedJob\\n  uint256 public requiredMinBond = 50 ether;\\n  /// @inheritdoc IKeep3rBondedJob\\n  uint256 public requiredEarnings;\\n  /// @inheritdoc IKeep3rBondedJob\\n  uint256 public requiredAge;\\n\\n  // methods\\n\\n  /// @inheritdoc IKeep3rBondedJob\\n  function setKeep3rRequirements(\\n    address _bond,\\n    uint256 _minBond,\\n    uint256 _earned,\\n    uint256 _age\\n  ) public onlyGovernor {\\n    _setKeep3rRequirements(_bond, _minBond, _earned, _age);\\n  }\\n\\n  // internals\\n\\n  function _setKeep3rRequirements(\\n    address _bond,\\n    uint256 _minBond,\\n    uint256 _earned,\\n    uint256 _age\\n  ) internal {\\n    requiredBond = _bond;\\n    requiredMinBond = _minBond;\\n    requiredEarnings = _earned;\\n    requiredAge = _age;\\n    emit Keep3rRequirementsSet(_bond, _minBond, _earned, _age);\\n  }\\n\\n  function _isValidKeeper(address _keeper) internal virtual override {\\n    if (!IKeep3rV2(keep3r).isBondedKeeper(_keeper, requiredBond, requiredMinBond, requiredEarnings, requiredAge)) revert KeeperNotValid();\\n  }\\n}\\n\",\"keccak256\":\"0x09807e31068ba3006a823d57b7ce2c34d712a91827ac3b463d5351f0b4e5ca42\",\"license\":\"MIT\"},\"solidity/contracts/utils/Keep3rJob.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9 <0.9.0;\\n\\nimport './Governable.sol';\\nimport '../../interfaces/utils/IKeep3rJob.sol';\\nimport '../../interfaces/external/IKeep3rV2.sol';\\n\\nabstract contract Keep3rJob is IKeep3rJob, Governable {\\n  /// @inheritdoc IKeep3rJob\\n  address public keep3r = 0xeb02addCfD8B773A5FFA6B9d1FE99c566f8c44CC;\\n\\n  // methods\\n\\n  /// @inheritdoc IKeep3rJob\\n  function setKeep3r(address _keep3r) public onlyGovernor {\\n    _setKeep3r(_keep3r);\\n  }\\n\\n  // modifiers\\n\\n  modifier upkeep() {\\n    _isValidKeeper(msg.sender);\\n    _;\\n    IKeep3rV2(keep3r).worked(msg.sender);\\n  }\\n\\n  // internals\\n\\n  function _setKeep3r(address _keep3r) internal {\\n    keep3r = _keep3r;\\n    emit Keep3rSet(_keep3r);\\n  }\\n\\n  function _isValidKeeper(address _keeper) internal virtual {\\n    if (!IKeep3rV2(keep3r).isKeeper(_keeper)) revert KeeperNotValid();\\n  }\\n}\\n\",\"keccak256\":\"0x8e7f850390f703654c2b9fca34939e24013184b21900a9f1c589694e55b7fc9d\",\"license\":\"MIT\"},\"solidity/contracts/utils/Keep3rMeteredJob.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9 <0.9.0;\\n\\nimport './Keep3rJob.sol';\\nimport '../../interfaces/external/IKeep3rHelper.sol';\\nimport '../../interfaces/utils/IKeep3rMeteredJob.sol';\\n\\nabstract contract Keep3rMeteredJob is IKeep3rMeteredJob, Keep3rJob {\\n  /// @inheritdoc IKeep3rMeteredJob\\n  address public keep3rHelper = 0xeDDe080E28Eb53532bD1804de51BD9Cd5cADF0d4;\\n  /// @inheritdoc IKeep3rMeteredJob\\n  uint256 public gasBonus = 102_000;\\n  /// @inheritdoc IKeep3rMeteredJob\\n  uint256 public gasMultiplier = 10_000;\\n  /// @inheritdoc IKeep3rMeteredJob\\n  uint32 public constant BASE = 10_000;\\n  /// @inheritdoc IKeep3rMeteredJob\\n  uint256 public maxMultiplier = 15_000;\\n\\n  // setters\\n\\n  /// @inheritdoc IKeep3rMeteredJob\\n  function setKeep3rHelper(address _keep3rHelper) public onlyGovernor {\\n    _setKeep3rHelper(_keep3rHelper);\\n  }\\n\\n  /// @inheritdoc IKeep3rMeteredJob\\n  function setGasBonus(uint256 _gasBonus) external onlyGovernor {\\n    _setGasBonus(_gasBonus);\\n  }\\n\\n  /// @inheritdoc IKeep3rMeteredJob\\n  function setMaxMultiplier(uint256 _maxMultiplier) external onlyGovernor {\\n    _setMaxMultiplier(_maxMultiplier);\\n  }\\n\\n  /// @inheritdoc IKeep3rMeteredJob\\n  function setGasMultiplier(uint256 _gasMultiplier) external onlyGovernor {\\n    _setGasMultiplier(_gasMultiplier);\\n  }\\n\\n  // modifiers\\n\\n  modifier upkeepMetered() {\\n    uint256 _initialGas = gasleft();\\n    _isValidKeeper(msg.sender);\\n    _;\\n    uint256 _gasAfterWork = gasleft();\\n    uint256 _reward = IKeep3rHelper(keep3rHelper).getRewardAmountFor(msg.sender, _initialGas - _gasAfterWork + gasBonus);\\n    _reward = (_reward * gasMultiplier) / BASE;\\n    IKeep3rV2(keep3r).bondedPayment(msg.sender, _reward);\\n    emit GasMetered(_initialGas, _gasAfterWork, gasBonus);\\n  }\\n\\n  // internals\\n\\n  function _setKeep3rHelper(address _keep3rHelper) internal {\\n    keep3rHelper = _keep3rHelper;\\n    emit Keep3rHelperSet(_keep3rHelper);\\n  }\\n\\n  function _setGasBonus(uint256 _gasBonus) internal {\\n    gasBonus = _gasBonus;\\n    emit GasBonusSet(gasBonus);\\n  }\\n\\n  function _setMaxMultiplier(uint256 _maxMultiplier) internal {\\n    maxMultiplier = _maxMultiplier;\\n    emit MaxMultiplierSet(maxMultiplier);\\n  }\\n\\n  function _setGasMultiplier(uint256 _gasMultiplier) internal {\\n    if (_gasMultiplier > maxMultiplier) revert MaxMultiplier();\\n    gasMultiplier = _gasMultiplier;\\n    emit GasMultiplierSet(gasMultiplier);\\n  }\\n\\n  function _calculateCredits(uint256 _gasUsed) internal view returns (uint256 _credits) {\\n    return IKeep3rHelper(keep3rHelper).getRewardAmount(_gasUsed);\\n  }\\n}\\n\",\"keccak256\":\"0x680c32b39c45a8ee22bafc6d540f96b3e05383e37f3dd9d5d3b20f1cddcdb560\",\"license\":\"MIT\"},\"solidity/contracts/utils/Keep3rMeteredStealthJob.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9 <0.9.0;\\n\\nimport './Keep3rMeteredJob.sol';\\nimport './Keep3rBondedJob.sol';\\nimport './OnlyEOA.sol';\\n\\nimport '../../interfaces/utils/IKeep3rStealthJob.sol';\\nimport '../../interfaces/external/IStealthRelayer.sol';\\n\\nabstract contract Keep3rMeteredStealthJob is IKeep3rStealthJob, Keep3rMeteredJob, Keep3rBondedJob, OnlyEOA {\\n  /// @inheritdoc IKeep3rStealthJob\\n  address public stealthRelayer;\\n\\n  // methods\\n\\n  /// @inheritdoc IKeep3rStealthJob\\n  function setStealthRelayer(address _stealthRelayer) public onlyGovernor {\\n    _setStealthRelayer(_stealthRelayer);\\n  }\\n\\n  // modifiers\\n\\n  modifier onlyStealthRelayer() {\\n    if (msg.sender != stealthRelayer) revert OnlyStealthRelayer();\\n    _;\\n  }\\n\\n  modifier upkeepStealthy() {\\n    uint256 _initialGas = _getGasLeft();\\n    if (msg.sender != stealthRelayer) revert OnlyStealthRelayer();\\n    address _keeper = IStealthRelayer(stealthRelayer).caller();\\n    _isValidKeeper(_keeper);\\n\\n    _;\\n\\n    uint256 _gasAfterWork = _getGasLeft();\\n    uint256 _reward = IKeep3rHelper(keep3rHelper).getRewardAmountFor(_keeper, _initialGas - _gasAfterWork + gasBonus);\\n    _reward = (_reward * gasMultiplier) / BASE;\\n    IKeep3rV2(keep3r).bondedPayment(_keeper, _reward);\\n    emit GasMetered(_initialGas, _gasAfterWork, gasBonus);\\n  }\\n\\n  // internals\\n\\n  function _isValidKeeper(address _keeper) internal override(Keep3rBondedJob, Keep3rJob) {\\n    if (onlyEOA) _validateEOA(_keeper);\\n    super._isValidKeeper(_keeper);\\n  }\\n\\n  function _setStealthRelayer(address _stealthRelayer) internal {\\n    stealthRelayer = _stealthRelayer;\\n    emit StealthRelayerSet(_stealthRelayer);\\n  }\\n\\n  /// @notice Return the gas left and add 1/64 in order to match real gas left at first level of depth (EIP-150)\\n  function _getGasLeft() internal view returns (uint256 _gasLeft) {\\n    _gasLeft = (gasleft() * 64) / 63;\\n  }\\n}\\n\",\"keccak256\":\"0x27ca1e8428e85328a5c791335da4191068a00fcd76c14e3a673642984f30bf3e\",\"license\":\"MIT\"},\"solidity/contracts/utils/MachineryReady.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9 <0.9.0;\\n\\nimport '@yearn-mechanics/contract-utils/solidity/contracts/utils/Machinery.sol';\\nimport './Governable.sol';\\n\\nabstract contract MachineryReady is Machinery, Governable {\\n  // errors\\n\\n  /// @notice Throws when a OnlyGovernorOrMechanic function is called from an unknown address\\n  error OnlyGovernorOrMechanic();\\n\\n  constructor(address _mechanicsRegistry) Machinery(_mechanicsRegistry) {}\\n\\n  // methods\\n\\n  /// @notice Allows governor to set a new MechanicsRegistry contract\\n  /// @param _mechanicsRegistry Address of the new MechanicsRegistry contract\\n  function setMechanicsRegistry(address _mechanicsRegistry) external override onlyGovernor {\\n    _setMechanicsRegistry(_mechanicsRegistry);\\n  }\\n\\n  // modifiers\\n\\n  modifier onlyGovernorOrMechanic() {\\n    _validateGovernorOrMechanic(msg.sender);\\n    _;\\n  }\\n\\n  // internals\\n\\n  function _validateGovernorOrMechanic(address _user) internal view {\\n    if (_user != governor && !isMechanic(_user)) revert OnlyGovernorOrMechanic();\\n  }\\n}\\n\",\"keccak256\":\"0xab58a9ae169d302f8a1144c413a224c5a6e3fa72d5f4e8164eb24024a9ef4282\",\"license\":\"MIT\"},\"solidity/contracts/utils/OnlyEOA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9 <0.9.0;\\n\\nimport '../../interfaces/utils/IOnlyEOA.sol';\\nimport './Governable.sol';\\n\\nabstract contract OnlyEOA is IOnlyEOA, Governable {\\n  /// @inheritdoc IOnlyEOA\\n  bool public onlyEOA;\\n\\n  // methods\\n\\n  /// @inheritdoc IOnlyEOA\\n  function setOnlyEOA(bool _onlyEOA) external onlyGovernor {\\n    _setOnlyEOA(_onlyEOA);\\n  }\\n\\n  // internals\\n\\n  function _setOnlyEOA(bool _onlyEOA) internal {\\n    onlyEOA = _onlyEOA;\\n    emit OnlyEOASet(_onlyEOA);\\n  }\\n\\n  function _validateEOA(address _caller) internal view {\\n    // solhint-disable-next-line avoid-tx-origin\\n    if (_caller != tx.origin) revert OnlyEOA();\\n  }\\n}\\n\",\"keccak256\":\"0x687ee45ef50362797088f7fb431df872322439eb9f046abc0a82641b867050a4\",\"license\":\"MIT\"},\"solidity/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9 <0.9.0;\\n\\nimport './Governable.sol';\\nimport '../../interfaces/utils/IPausable.sol';\\n\\nabstract contract Pausable is IPausable, Governable {\\n  /// @inheritdoc IPausable\\n  bool public paused;\\n\\n  // setters\\n\\n  /// @inheritdoc IPausable\\n  function setPause(bool _paused) external onlyGovernor {\\n    _setPause(_paused);\\n  }\\n\\n  // modifiers\\n\\n  modifier notPaused() {\\n    if (paused) revert Paused();\\n    _;\\n  }\\n\\n  // internals\\n\\n  function _setPause(bool _paused) internal {\\n    if (paused == _paused) revert NoChangeInPause();\\n    paused = _paused;\\n    emit PauseSet(_paused);\\n  }\\n}\\n\",\"keccak256\":\"0xc1e66374b30db4b7e192c7038b05c8549c0d22605555839afd6b4e0a41c3971d\",\"license\":\"MIT\"},\"solidity/interfaces/IV2Keep3rStealthJob.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport './IV2KeeperJob.sol';\\n\\ninterface IV2Keep3rStealthJob is IV2KeeperJob {\\n  /// @notice Function to be called by governor or mechanic that triggers the execution of the given strategy\\n  /// @notice This function bypasses the stealth relayer checks\\n  /// @param _strategy Address of the strategy to be worked\\n  function forceWorkUnsafe(address _strategy) external;\\n}\\n\",\"keccak256\":\"0xd87c84e3a2787b92011baa6b308e1eacd44cff8e0c9c3c519b8c2c977f3d046c\",\"license\":\"MIT\"},\"solidity/interfaces/IV2KeeperJob.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\nimport './external/IV2Keeper.sol';\\n\\ninterface IV2KeeperJob {\\n  // errors\\n\\n  /// @notice Throws if the strategy being added has already been added\\n  error StrategyAlreadyAdded();\\n  /// @notice Throws if the strategy being summoned is not added\\n  error StrategyNotAdded();\\n  /// @notice Throws if a keeper tries to work a non-workable strategy\\n  error StrategyNotWorkable();\\n  /// @notice Throws if the cooldown is being set to 0\\n  error ZeroCooldown();\\n\\n  // events\\n\\n  /// @notice Emitted when a new strategy is added\\n  /// @param _strategy Address of the strategy being added\\n  /// @param _requiredAmount Estimated amount of gas required to trigger the strategy\\n  event StrategyAdded(address _strategy, uint256 _requiredAmount);\\n\\n  /// @notice Emitted when a strategy is modified\\n  /// @param _strategy Address of the strategy being modified\\n  /// @param _requiredAmount New estimated amount of gas required to trigger the strategy\\n  event StrategyModified(address _strategy, uint256 _requiredAmount);\\n\\n  /// @notice Emitted when a strategy is removed\\n  /// @param _strategy Address of the strategy being removed\\n  event StrategyRemoved(address _strategy);\\n\\n  /// @notice Emitted when a strategy is worked\\n  /// @param _strategy Address of the strategy being worked\\n  event KeeperWorked(address _strategy);\\n\\n  /// @notice Emitted when a strategy is force-worked by governor or mechanic\\n  /// @param _strategy Address of the strategy being force-worked\\n  event ForceWorked(address _strategy);\\n\\n  // views\\n\\n  /// @return _v2Keeper Address of v2Keeper\\n  function v2Keeper() external view returns (IV2Keeper _v2Keeper);\\n\\n  /// @return _strategies List of added strategies\\n  function strategies() external view returns (address[] memory _strategies);\\n\\n  /// @return _workCooldown Amount of seconds to wait until a strategy can be worked again\\n  function workCooldown() external view returns (uint256 _workCooldown);\\n\\n  /// @param _strategy Address of the strategy to query\\n  /// @return _isWorkable Whether the queried strategy is workable or not\\n  function workable(address _strategy) external view returns (bool _isWorkable);\\n\\n  /// @param _strategy Address of the strategy to query\\n  /// @return _lastWorkAt Timestamp of the last time the strategy was worked\\n  function lastWorkAt(address _strategy) external view returns (uint256 _lastWorkAt);\\n\\n  /// @param _strategy Address of the strategy to query\\n  /// @return _requiredAmount Estimated amount of gas that the strategy requires to be executed\\n  function requiredAmount(address _strategy) external view returns (uint256 _requiredAmount);\\n\\n  // methods\\n\\n  /// @param _v2Keeper Address of the new v2Keeper to set\\n  function setV2Keeper(address _v2Keeper) external;\\n\\n  /// @param _workCooldown Amount of seconds to wait until a strategy can be worked again\\n  function setWorkCooldown(uint256 _workCooldown) external;\\n\\n  /// @param _strategy Address of the strategy to add\\n  /// @param _requiredAmount Amount of gas that the strategy requires to execute\\n  function addStrategy(address _strategy, uint256 _requiredAmount) external;\\n\\n  /// @param _strategies Array of addresses of strategies to add\\n  /// @param _requiredAmount Array of amount of gas that each strategy requires to execute\\n  function addStrategies(address[] calldata _strategies, uint256[] calldata _requiredAmount) external;\\n\\n  /// @param _strategy Address of the strategy to modify\\n  /// @param _requiredAmount New amount of gas that te strategy requires to execute\\n  function updateRequiredAmount(address _strategy, uint256 _requiredAmount) external;\\n\\n  /// @param _strategies Array of addresses of strategies to modify\\n  /// @param _requiredAmounts Array of new amounts of gas that each strategy requires to execute\\n  function updateRequiredAmounts(address[] calldata _strategies, uint256[] calldata _requiredAmounts) external;\\n\\n  /// @param _strategy Address of the strategy to remove\\n  function removeStrategy(address _strategy) external;\\n\\n  /// @notice Function to be called by the keeper that triggers the execution of the given strategy\\n  /// @param _strategy Address of the strategy to be worked\\n  function work(address _strategy) external;\\n\\n  /// @notice Function to be called by governor or mechanics that triggers the execution of the given strategy\\n  /// @notice This function bypasses the workable checks\\n  /// @param _strategy Address of the strategy to be worked\\n  function forceWork(address _strategy) external;\\n}\\n\",\"keccak256\":\"0x48887d20b2ba7c88ea2963ca67b6d541675789154d30a48daf856f2d80651606\",\"license\":\"MIT\"},\"solidity/interfaces/external/IBaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IBaseStrategy {\\n  // events\\n  event Harvested(uint256 _profit, uint256 _loss, uint256 _debtPayment, uint256 _debtOutstanding);\\n\\n  // views\\n\\n  function vault() external view returns (address _vault);\\n\\n  function strategist() external view returns (address _strategist);\\n\\n  function rewards() external view returns (address _rewards);\\n\\n  function keeper() external view returns (address _keeper);\\n\\n  function want() external view returns (address _want);\\n\\n  function name() external view returns (string memory _name);\\n\\n  function profitFactor() external view returns (uint256 _profitFactor);\\n\\n  function maxReportDelay() external view returns (uint256 _maxReportDelay);\\n\\n  function crv() external view returns (address _crv);\\n\\n  // setters\\n  function setStrategist(address _strategist) external;\\n\\n  function setKeeper(address _keeper) external;\\n\\n  function setRewards(address _rewards) external;\\n\\n  function tendTrigger(uint256 _callCost) external view returns (bool);\\n\\n  function tend() external;\\n\\n  function harvestTrigger(uint256 _callCost) external view returns (bool);\\n\\n  function harvest() external;\\n\\n  function setBorrowCollateralizationRatio(uint256 _c) external;\\n}\\n\",\"keccak256\":\"0x748c58b289aa0e139a6bbf121e4c30e25ac3525f7a1305943176f6a1c59d5e2d\",\"license\":\"MIT\"},\"solidity/interfaces/external/IKeep3rHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/// @title Keep3rHelper contract\\n/// @notice Contains all the helper functions used throughout the different files.\\ninterface IKeep3rHelper {\\n  // Errors\\n\\n  /// @notice Throws when none of the tokens in the liquidity pair is KP3R\\n  error LiquidityPairInvalid();\\n\\n  // Variables\\n\\n  /// @notice Address of KP3R token\\n  /// @return _kp3r Address of KP3R token\\n  // solhint-disable func-name-mixedcase\\n  function KP3R() external view returns (address _kp3r);\\n\\n  /// @notice Address of KP3R-WETH pool to use as oracle\\n  /// @return _kp3rWeth Address of KP3R-WETH pool to use as oracle\\n  function KP3R_WETH_POOL() external view returns (address _kp3rWeth);\\n\\n  /// @notice The minimum multiplier used to calculate the amount of gas paid to the Keeper for the gas used to perform a job\\n  ///         For example: if the quoted gas used is 1000, then the minimum amount to be paid will be 1000 * MIN / BOOST_BASE\\n  /// @return _multiplier The MIN multiplier\\n  function MIN() external view returns (uint256 _multiplier);\\n\\n  /// @notice The maximum multiplier used to calculate the amount of gas paid to the Keeper for the gas used to perform a job\\n  ///         For example: if the quoted gas used is 1000, then the maximum amount to be paid will be 1000 * MAX / BOOST_BASE\\n  /// @return _multiplier The MAX multiplier\\n  function MAX() external view returns (uint256 _multiplier);\\n\\n  /// @notice The boost base used to calculate the boost rewards for the keeper\\n  /// @return _base The boost base number\\n  function BOOST_BASE() external view returns (uint256 _base);\\n\\n  /// @notice The targeted amount of bonded KP3Rs to max-up reward multiplier\\n  ///         For example: if the amount of KP3R the keeper has bonded is TARGETBOND or more, then the keeper will get\\n  ///                      the maximum boost possible in his rewards, if it's less, the reward boost will be proportional\\n  /// @return _target The amount of KP3R that comforms the TARGETBOND\\n  function TARGETBOND() external view returns (uint256 _target);\\n\\n  // Methods\\n  // solhint-enable func-name-mixedcase\\n\\n  /// @notice Calculates the amount of KP3R that corresponds to the ETH passed into the function\\n  /// @dev This function allows us to calculate how much KP3R we should pay to a keeper for things expressed in ETH, like gas\\n  /// @param _eth The amount of ETH\\n  /// @return _amountOut The amount of KP3R\\n  function quote(uint256 _eth) external view returns (uint256 _amountOut);\\n\\n  /// @notice Returns the amount of KP3R the keeper has bonded\\n  /// @param _keeper The address of the keeper to check\\n  /// @return _amountBonded The amount of KP3R the keeper has bonded\\n  function bonds(address _keeper) external view returns (uint256 _amountBonded);\\n\\n  /// @notice Calculates the reward (in KP3R) that corresponds to a keeper for using gas\\n  /// @param _keeper The address of the keeper to check\\n  /// @param _gasUsed The amount of gas used that will be rewarded\\n  /// @return _kp3r The amount of KP3R that should be awarded to the keeper\\n  function getRewardAmountFor(address _keeper, uint256 _gasUsed) external view returns (uint256 _kp3r);\\n\\n  /// @notice Calculates the boost in the reward given to a keeper based on the amount of KP3R that keeper has bonded\\n  /// @param _bonds The amount of KP3R tokens bonded by the keeper\\n  /// @return _rewardBoost The reward boost that corresponds to the keeper\\n  function getRewardBoostFor(uint256 _bonds) external view returns (uint256 _rewardBoost);\\n\\n  /// @notice Calculates the reward (in KP3R) that corresponds to tx.origin for using gas\\n  /// @param _gasUsed The amount of gas used that will be rewarded\\n  /// @return _amount The amount of KP3R that should be awarded to tx.origin\\n  function getRewardAmount(uint256 _gasUsed) external view returns (uint256 _amount);\\n\\n  /// @notice Given a pool address, returns the underlying tokens of the pair\\n  /// @param _pool Address of the correspondant pool\\n  /// @return _token0 Address of the first token of the pair\\n  /// @return _token1 Address of the second token of the pair\\n  function getPoolTokens(address _pool) external view returns (address _token0, address _token1);\\n\\n  /// @notice Defines the order of the tokens in the pair for twap calculations\\n  /// @param _pool Address of the correspondant pool\\n  /// @return _isKP3RToken0 Boolean indicating the order of the tokens in the pair\\n  function isKP3RToken0(address _pool) external view returns (bool _isKP3RToken0);\\n\\n  /// @notice Given an array of secondsAgo, returns UniswapV3 pool cumulatives at that moment\\n  /// @param _pool Address of the pool to observe\\n  /// @param _secondsAgo Array with time references to observe\\n  /// @return _tickCumulative1 Cummulative sum of ticks until first time reference\\n  /// @return _tickCumulative2 Cummulative sum of ticks until second time reference\\n  /// @return _success Boolean indicating if the observe call was succesfull\\n  function observe(address _pool, uint32[] memory _secondsAgo)\\n    external\\n    view\\n    returns (\\n      int56 _tickCumulative1,\\n      int56 _tickCumulative2,\\n      bool _success\\n    );\\n\\n  /// @notice Given a tick and a liquidity amount, calculates the underlying KP3R tokens\\n  /// @param _liquidityAmount Amount of liquidity to be converted\\n  /// @param _tickDifference Tick value used to calculate the quote\\n  /// @param _timeInterval Time value used to calculate the quote\\n  /// @return _kp3rAmount Amount of KP3R tokens underlying on the given liquidity\\n  function getKP3RsAtTick(\\n    uint256 _liquidityAmount,\\n    int56 _tickDifference,\\n    uint256 _timeInterval\\n  ) external pure returns (uint256 _kp3rAmount);\\n\\n  /// @notice Given a tick and a token amount, calculates the output in correspondant token\\n  /// @param _baseAmount Amount of token to be converted\\n  /// @param _tickDifference Tick value used to calculate the quote\\n  /// @param _timeInterval Time value used to calculate the quote\\n  /// @return _quoteAmount Amount of credits deserved for the baseAmount at the tick value\\n  function getQuoteAtTick(\\n    uint128 _baseAmount,\\n    int56 _tickDifference,\\n    uint256 _timeInterval\\n  ) external pure returns (uint256 _quoteAmount);\\n}\\n\",\"keccak256\":\"0xc1403ca749d220ed4798d4285a91e1f63466fa57a0d1e6e564d26aba98239333\",\"license\":\"MIT\"},\"solidity/interfaces/external/IKeep3rV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface IKeep3rV2 {\\n  /// @notice Stores the tick information of the different liquidity pairs\\n  struct TickCache {\\n    int56 current; // Tracks the current tick\\n    int56 difference; // Stores the difference between the current tick and the last tick\\n    uint256 period; // Stores the period at which the last observation was made\\n  }\\n\\n  // Events\\n\\n  /// @notice Emitted when the Keep3rHelper address is changed\\n  /// @param _keep3rHelper The address of Keep3rHelper's contract\\n  event Keep3rHelperChange(address _keep3rHelper);\\n\\n  /// @notice Emitted when the Keep3rV1 address is changed\\n  /// @param _keep3rV1 The address of Keep3rV1's contract\\n  event Keep3rV1Change(address _keep3rV1);\\n\\n  /// @notice Emitted when the Keep3rV1Proxy address is changed\\n  /// @param _keep3rV1Proxy The address of Keep3rV1Proxy's contract\\n  event Keep3rV1ProxyChange(address _keep3rV1Proxy);\\n\\n  /// @notice Emitted when the KP3R-WETH pool address is changed\\n  /// @param _kp3rWethPool The address of the KP3R-WETH pool\\n  event Kp3rWethPoolChange(address _kp3rWethPool);\\n\\n  /// @notice Emitted when bondTime is changed\\n  /// @param _bondTime The new bondTime\\n  event BondTimeChange(uint256 _bondTime);\\n\\n  /// @notice Emitted when _liquidityMinimum is changed\\n  /// @param _liquidityMinimum The new _liquidityMinimum\\n  event LiquidityMinimumChange(uint256 _liquidityMinimum);\\n\\n  /// @notice Emitted when _unbondTime is changed\\n  /// @param _unbondTime The new _unbondTime\\n  event UnbondTimeChange(uint256 _unbondTime);\\n\\n  /// @notice Emitted when _rewardPeriodTime is changed\\n  /// @param _rewardPeriodTime The new _rewardPeriodTime\\n  event RewardPeriodTimeChange(uint256 _rewardPeriodTime);\\n\\n  /// @notice Emitted when the inflationPeriod is changed\\n  /// @param _inflationPeriod The new inflationPeriod\\n  event InflationPeriodChange(uint256 _inflationPeriod);\\n\\n  /// @notice Emitted when the fee is changed\\n  /// @param _fee The new token credits fee\\n  event FeeChange(uint256 _fee);\\n\\n  /// @notice Emitted when a slasher is added\\n  /// @param _slasher Address of the added slasher\\n  event SlasherAdded(address _slasher);\\n\\n  /// @notice Emitted when a slasher is removed\\n  /// @param _slasher Address of the removed slasher\\n  event SlasherRemoved(address _slasher);\\n\\n  /// @notice Emitted when a disputer is added\\n  /// @param _disputer Address of the added disputer\\n  event DisputerAdded(address _disputer);\\n\\n  /// @notice Emitted when a disputer is removed\\n  /// @param _disputer Address of the removed disputer\\n  event DisputerRemoved(address _disputer);\\n\\n  /// @notice Emitted when the bonding process of a new keeper begins\\n  /// @param _keeper The caller of Keep3rKeeperFundable#bond function\\n  /// @param _bonding The asset the keeper has bonded\\n  /// @param _amount The amount the keeper has bonded\\n  event Bonding(address indexed _keeper, address indexed _bonding, uint256 _amount);\\n\\n  /// @notice Emitted when a keeper or job begins the unbonding process to withdraw the funds\\n  /// @param _keeperOrJob The keeper or job that began the unbonding process\\n  /// @param _unbonding The liquidity pair or asset being unbonded\\n  /// @param _amount The amount being unbonded\\n  event Unbonding(address indexed _keeperOrJob, address indexed _unbonding, uint256 _amount);\\n\\n  /// @notice Emitted when Keep3rKeeperFundable#activate is called\\n  /// @param _keeper The keeper that has been activated\\n  /// @param _bond The asset the keeper has bonded\\n  /// @param _amount The amount of the asset the keeper has bonded\\n  event Activation(address indexed _keeper, address indexed _bond, uint256 _amount);\\n\\n  /// @notice Emitted when Keep3rKeeperFundable#withdraw is called\\n  /// @param _keeper The caller of Keep3rKeeperFundable#withdraw function\\n  /// @param _bond The asset to withdraw from the bonding pool\\n  /// @param _amount The amount of funds withdrawn\\n  event Withdrawal(address indexed _keeper, address indexed _bond, uint256 _amount);\\n\\n  /// @notice Emitted when Keep3rKeeperDisputable#slash is called\\n  /// @param _keeper The slashed keeper\\n  /// @param _slasher The user that called Keep3rKeeperDisputable#slash\\n  /// @param _amount The amount of credits slashed from the keeper\\n  event KeeperSlash(address indexed _keeper, address indexed _slasher, uint256 _amount);\\n\\n  /// @notice Emitted when Keep3rKeeperDisputable#revoke is called\\n  /// @param _keeper The revoked keeper\\n  /// @param _slasher The user that called Keep3rKeeperDisputable#revoke\\n  event KeeperRevoke(address indexed _keeper, address indexed _slasher);\\n\\n  /// @notice Emitted when Keep3rJobFundableCredits#addTokenCreditsToJob is called\\n  /// @param _job The address of the job being credited\\n  /// @param _token The address of the token being provided\\n  /// @param _provider The user that calls the function\\n  /// @param _amount The amount of credit being added to the job\\n  event TokenCreditAddition(address indexed _job, address indexed _token, address indexed _provider, uint256 _amount);\\n\\n  /// @notice Emitted when Keep3rJobFundableCredits#withdrawTokenCreditsFromJob is called\\n  /// @param _job The address of the job from which the credits are withdrawn\\n  /// @param _token The credit being withdrawn from the job\\n  /// @param _receiver The user that receives the tokens\\n  /// @param _amount The amount of credit withdrawn\\n  event TokenCreditWithdrawal(address indexed _job, address indexed _token, address indexed _receiver, uint256 _amount);\\n\\n  /// @notice Emitted when Keep3rJobFundableLiquidity#approveLiquidity function is called\\n  /// @param _liquidity The address of the liquidity pair being approved\\n  event LiquidityApproval(address _liquidity);\\n\\n  /// @notice Emitted when Keep3rJobFundableLiquidity#revokeLiquidity function is called\\n  /// @param _liquidity The address of the liquidity pair being revoked\\n  event LiquidityRevocation(address _liquidity);\\n\\n  /// @notice Emitted when IKeep3rJobFundableLiquidity#addLiquidityToJob function is called\\n  /// @param _job The address of the job to which liquidity will be added\\n  /// @param _liquidity The address of the liquidity being added\\n  /// @param _provider The user that calls the function\\n  /// @param _amount The amount of liquidity being added\\n  event LiquidityAddition(address indexed _job, address indexed _liquidity, address indexed _provider, uint256 _amount);\\n\\n  /// @notice Emitted when IKeep3rJobFundableLiquidity#withdrawLiquidityFromJob function is called\\n  /// @param _job The address of the job of which liquidity will be withdrawn from\\n  /// @param _liquidity The address of the liquidity being withdrawn\\n  /// @param _receiver The receiver of the liquidity tokens\\n  /// @param _amount The amount of liquidity being withdrawn from the job\\n  event LiquidityWithdrawal(address indexed _job, address indexed _liquidity, address indexed _receiver, uint256 _amount);\\n\\n  /// @notice Emitted when Keep3rJobFundableLiquidity#addLiquidityToJob function is called\\n  /// @param _job The address of the job whose credits will be updated\\n  /// @param _rewardedAt The time at which the job was last rewarded\\n  /// @param _currentCredits The current credits of the job\\n  /// @param _periodCredits The credits of the job for the current period\\n  event LiquidityCreditsReward(address indexed _job, uint256 _rewardedAt, uint256 _currentCredits, uint256 _periodCredits);\\n\\n  /// @notice Emitted when Keep3rJobFundableLiquidity#forceLiquidityCreditsToJob function is called\\n  /// @param _job The address of the job whose credits will be updated\\n  /// @param _rewardedAt The time at which the job was last rewarded\\n  /// @param _currentCredits The current credits of the job\\n  event LiquidityCreditsForced(address indexed _job, uint256 _rewardedAt, uint256 _currentCredits);\\n\\n  /// @notice Emitted when Keep3rJobManager#addJob is called\\n  /// @param _job The address of the job to add\\n  /// @param _jobOwner The job's owner\\n  event JobAddition(address indexed _job, address indexed _jobOwner);\\n\\n  /// @notice Emitted when a keeper is validated before a job\\n  /// @param _gasLeft The amount of gas that the transaction has left at the moment of keeper validation\\n  event KeeperValidation(uint256 _gasLeft);\\n\\n  /// @notice Emitted when a keeper works a job\\n  /// @param _credit The address of the asset in which the keeper is paid\\n  /// @param _job The address of the job the keeper has worked\\n  /// @param _keeper The address of the keeper that has worked the job\\n  /// @param _amount The amount that has been paid out to the keeper in exchange for working the job\\n  /// @param _gasLeft The amount of gas that the transaction has left at the moment of payment\\n  event KeeperWork(address indexed _credit, address indexed _job, address indexed _keeper, uint256 _amount, uint256 _gasLeft);\\n\\n  /// @notice Emitted when Keep3rJobOwnership#changeJobOwnership is called\\n  /// @param _job The address of the job proposed to have a change of owner\\n  /// @param _owner The current owner of the job\\n  /// @param _pendingOwner The new address proposed to be the owner of the job\\n  event JobOwnershipChange(address indexed _job, address indexed _owner, address indexed _pendingOwner);\\n\\n  /// @notice Emitted when Keep3rJobOwnership#JobOwnershipAssent is called\\n  /// @param _job The address of the job which the proposed owner will now own\\n  /// @param _previousOwner The previous owner of the job\\n  /// @param _newOwner The newowner of the job\\n  event JobOwnershipAssent(address indexed _job, address indexed _previousOwner, address indexed _newOwner);\\n\\n  /// @notice Emitted when Keep3rJobMigration#migrateJob function is called\\n  /// @param _fromJob The address of the job that requests to migrate\\n  /// @param _toJob The address at which the job requests to migrate\\n  event JobMigrationRequested(address indexed _fromJob, address _toJob);\\n\\n  /// @notice Emitted when Keep3rJobMigration#acceptJobMigration function is called\\n  /// @param _fromJob The address of the job that requested to migrate\\n  /// @param _toJob The address at which the job had requested to migrate\\n  event JobMigrationSuccessful(address _fromJob, address indexed _toJob);\\n\\n  /// @notice Emitted when Keep3rJobDisputable#slashTokenFromJob is called\\n  /// @param _job The address of the job from which the token will be slashed\\n  /// @param _token The address of the token being slashed\\n  /// @param _slasher The user that slashes the token\\n  /// @param _amount The amount of the token being slashed\\n  event JobSlashToken(address indexed _job, address _token, address indexed _slasher, uint256 _amount);\\n\\n  /// @notice Emitted when Keep3rJobDisputable#slashLiquidityFromJob is called\\n  /// @param _job The address of the job from which the liquidity will be slashed\\n  /// @param _liquidity The address of the liquidity being slashed\\n  /// @param _slasher The user that slashes the liquidity\\n  /// @param _amount The amount of the liquidity being slashed\\n  event JobSlashLiquidity(address indexed _job, address _liquidity, address indexed _slasher, uint256 _amount);\\n\\n  /// @notice Emitted when a keeper or a job is disputed\\n  /// @param _jobOrKeeper The address of the disputed keeper/job\\n  /// @param _disputer The user that called the function and disputed the keeper\\n  event Dispute(address indexed _jobOrKeeper, address indexed _disputer);\\n\\n  /// @notice Emitted when a dispute is resolved\\n  /// @param _jobOrKeeper The address of the disputed keeper/job\\n  /// @param _resolver The user that called the function and resolved the dispute\\n  event Resolve(address indexed _jobOrKeeper, address indexed _resolver);\\n\\n  // Errors\\n\\n  /// @notice Throws if the reward period is less than the minimum reward period time\\n  error MinRewardPeriod();\\n\\n  /// @notice Throws if either a job or a keeper is disputed\\n  error Disputed();\\n\\n  /// @notice Throws if there are no bonded assets\\n  error BondsUnexistent();\\n\\n  /// @notice Throws if the time required to bond an asset has not passed yet\\n  error BondsLocked();\\n\\n  /// @notice Throws if there are no bonds to withdraw\\n  error UnbondsUnexistent();\\n\\n  /// @notice Throws if the time required to withdraw the bonds has not passed yet\\n  error UnbondsLocked();\\n\\n  /// @notice Throws if the address is already a registered slasher\\n  error SlasherExistent();\\n\\n  /// @notice Throws if caller is not a registered slasher\\n  error SlasherUnexistent();\\n\\n  /// @notice Throws if the address is already a registered disputer\\n  error DisputerExistent();\\n\\n  /// @notice Throws if caller is not a registered disputer\\n  error DisputerUnexistent();\\n\\n  /// @notice Throws if the msg.sender is not a slasher or is not a part of governance\\n  error OnlySlasher();\\n\\n  /// @notice Throws if the msg.sender is not a disputer or is not a part of governance\\n  error OnlyDisputer();\\n\\n  /// @notice Throws when an address is passed as a job, but that address is not a job\\n  error JobUnavailable();\\n\\n  /// @notice Throws when an action that requires an undisputed job is applied on a disputed job\\n  error JobDisputed();\\n\\n  /// @notice Throws when the address that is trying to register as a job is already a job\\n  error AlreadyAJob();\\n\\n  /// @notice Throws when the token is KP3R, as it should not be used for direct token payments\\n  error TokenUnallowed();\\n\\n  /// @notice Throws when the token withdraw cooldown has not yet passed\\n  error JobTokenCreditsLocked();\\n\\n  /// @notice Throws when the user tries to withdraw more tokens than it has\\n  error InsufficientJobTokenCredits();\\n\\n  /// @notice Throws when trying to add a job that has already been added\\n  error JobAlreadyAdded();\\n\\n  /// @notice Throws when the address that is trying to register as a keeper is already a keeper\\n  error AlreadyAKeeper();\\n\\n  /// @notice Throws when the liquidity being approved has already been approved\\n  error LiquidityPairApproved();\\n\\n  /// @notice Throws when the liquidity being removed has not been approved\\n  error LiquidityPairUnexistent();\\n\\n  /// @notice Throws when trying to add liquidity to an unapproved pool\\n  error LiquidityPairUnapproved();\\n\\n  /// @notice Throws when the job doesn't have the requested liquidity\\n  error JobLiquidityUnexistent();\\n\\n  /// @notice Throws when trying to remove more liquidity than the job has\\n  error JobLiquidityInsufficient();\\n\\n  /// @notice Throws when trying to add less liquidity than the minimum liquidity required\\n  error JobLiquidityLessThanMin();\\n\\n  /// @notice Throws if a variable is assigned to the zero address\\n  error ZeroAddress();\\n\\n  /// @notice Throws if the address claiming to be a job is not in the list of approved jobs\\n  error JobUnapproved();\\n\\n  /// @notice Throws if the amount of funds in the job is less than the payment that must be paid to the keeper that works that job\\n  error InsufficientFunds();\\n\\n  /// @notice Throws when the caller of the function is not the job owner\\n  error OnlyJobOwner();\\n\\n  /// @notice Throws when the caller of the function is not the pending job owner\\n  error OnlyPendingJobOwner();\\n\\n  /// @notice Throws when the address of the job that requests to migrate wants to migrate to its same address\\n  error JobMigrationImpossible();\\n\\n  /// @notice Throws when the _toJob address differs from the address being tracked in the pendingJobMigrations mapping\\n  error JobMigrationUnavailable();\\n\\n  /// @notice Throws when cooldown between migrations has not yet passed\\n  error JobMigrationLocked();\\n\\n  /// @notice Throws when the token trying to be slashed doesn't exist\\n  error JobTokenUnexistent();\\n\\n  /// @notice Throws when someone tries to slash more tokens than the job has\\n  error JobTokenInsufficient();\\n\\n  /// @notice Throws when a job or keeper is already disputed\\n  error AlreadyDisputed();\\n\\n  /// @notice Throws when a job or keeper is not disputed and someone tries to resolve the dispute\\n  error NotDisputed();\\n\\n  // Variables\\n\\n  /// @notice Address of Keep3rHelper's contract\\n  /// @return _keep3rHelper The address of Keep3rHelper's contract\\n  function keep3rHelper() external view returns (address _keep3rHelper);\\n\\n  /// @notice Address of Keep3rV1's contract\\n  /// @return _keep3rV1 The address of Keep3rV1's contract\\n  function keep3rV1() external view returns (address _keep3rV1);\\n\\n  /// @notice Address of Keep3rV1Proxy's contract\\n  /// @return _keep3rV1Proxy The address of Keep3rV1Proxy's contract\\n  function keep3rV1Proxy() external view returns (address _keep3rV1Proxy);\\n\\n  /// @notice Address of the KP3R-WETH pool\\n  /// @return _kp3rWethPool The address of KP3R-WETH pool\\n  function kp3rWethPool() external view returns (address _kp3rWethPool);\\n\\n  /// @notice The amount of time required to pass after a keeper has bonded assets for it to be able to activate\\n  /// @return _days The required bondTime in days\\n  function bondTime() external view returns (uint256 _days);\\n\\n  /// @notice The amount of time required to pass before a keeper can unbond what he has bonded\\n  /// @return _days The required unbondTime in days\\n  function unbondTime() external view returns (uint256 _days);\\n\\n  /// @notice The minimum amount of liquidity required to fund a job per liquidity\\n  /// @return _amount The minimum amount of liquidity in KP3R\\n  function liquidityMinimum() external view returns (uint256 _amount);\\n\\n  /// @notice The amount of time between each scheduled credits reward given to a job\\n  /// @return _days The reward period in days\\n  function rewardPeriodTime() external view returns (uint256 _days);\\n\\n  /// @notice The inflation period is the denominator used to regulate the emission of KP3R\\n  /// @return _period The denominator used to regulate the emission of KP3R\\n  function inflationPeriod() external view returns (uint256 _period);\\n\\n  /// @notice The fee to be sent to governance when a user adds liquidity to a job\\n  /// @return _amount The fee amount to be sent to governance when a user adds liquidity to a job\\n  function fee() external view returns (uint256 _amount);\\n\\n  // solhint-disable func-name-mixedcase\\n  /// @notice The base that will be used to calculate the fee\\n  /// @return _base The base that will be used to calculate the fee\\n  function BASE() external view returns (uint256 _base);\\n\\n  /// @notice The minimum rewardPeriodTime value to be set\\n  /// @return _minPeriod The minimum reward period in seconds\\n  function MIN_REWARD_PERIOD_TIME() external view returns (uint256 _minPeriod);\\n\\n  /// @notice Maps an address to a boolean to determine whether the address is a slasher or not.\\n  /// @return _isSlasher Whether the address is a slasher or not\\n  function slashers(address _slasher) external view returns (bool _isSlasher);\\n\\n  /// @notice Maps an address to a boolean to determine whether the address is a disputer or not.\\n  /// @return _isDisputer Whether the address is a disputer or not\\n  function disputers(address _disputer) external view returns (bool _isDisputer);\\n\\n  /// @notice Tracks the total KP3R earnings of a keeper since it started working\\n  /// @return _workCompleted Total KP3R earnings of a keeper since it started working\\n  function workCompleted(address _keeper) external view returns (uint256 _workCompleted);\\n\\n  /// @notice Tracks when a keeper was first registered\\n  /// @return _timestamp The time at which the keeper was first registered\\n  function firstSeen(address _keeper) external view returns (uint256 _timestamp);\\n\\n  /// @notice Tracks if a keeper or job has a pending dispute\\n  /// @return _disputed Whether a keeper or job has a pending dispute\\n  function disputes(address _keeperOrJob) external view returns (bool _disputed);\\n\\n  /// @notice Allows governance to create a dispute for a given keeper/job\\n  /// @param _jobOrKeeper The address in dispute\\n  function dispute(address _jobOrKeeper) external;\\n\\n  /// @notice Allows governance to resolve a dispute on a keeper/job\\n  /// @param _jobOrKeeper The address cleared\\n  function resolve(address _jobOrKeeper) external;\\n\\n  /// @notice Tracks how much a keeper has bonded of a certain token\\n  /// @return _bonds Amount of a certain token that a keeper has bonded\\n  function bonds(address _keeper, address _bond) external view returns (uint256 _bonds);\\n\\n  /// @notice The current token credits available for a job\\n  /// @return _amount The amount of token credits available for a job\\n  function jobTokenCredits(address _job, address _token) external view returns (uint256 _amount);\\n\\n  /// @notice Tracks the amount of assets deposited in pending bonds\\n  /// @return _pendingBonds Amount of a certain asset a keeper has unbonding\\n  function pendingBonds(address _keeper, address _bonding) external view returns (uint256 _pendingBonds);\\n\\n  /// @notice Tracks when a bonding for a keeper can be activated\\n  /// @return _timestamp Time at which the bonding for a keeper can be activated\\n  function canActivateAfter(address _keeper, address _bonding) external view returns (uint256 _timestamp);\\n\\n  /// @notice Tracks when keeper bonds are ready to be withdrawn\\n  /// @return _timestamp Time at which the keeper bonds are ready to be withdrawn\\n  function canWithdrawAfter(address _keeper, address _bonding) external view returns (uint256 _timestamp);\\n\\n  /// @notice Tracks how much keeper bonds are to be withdrawn\\n  /// @return _pendingUnbonds The amount of keeper bonds that are to be withdrawn\\n  function pendingUnbonds(address _keeper, address _bonding) external view returns (uint256 _pendingUnbonds);\\n\\n  /// @notice Checks whether the address has ever bonded an asset\\n  /// @return _hasBonded Whether the address has ever bonded an asset\\n  function hasBonded(address _keeper) external view returns (bool _hasBonded);\\n\\n  /// @notice Last block where tokens were added to the job [job => token => timestamp]\\n  /// @return _timestamp The last block where tokens were added to the job\\n  function jobTokenCreditsAddedAt(address _job, address _token) external view returns (uint256 _timestamp);\\n\\n  // Methods\\n\\n  /// @notice Add credit to a job to be paid out for work\\n  /// @param _job The address of the job being credited\\n  /// @param _token The address of the token being credited\\n  /// @param _amount The amount of credit being added\\n  function addTokenCreditsToJob(\\n    address _job,\\n    address _token,\\n    uint256 _amount\\n  ) external;\\n\\n  /// @notice Withdraw credit from a job\\n  /// @param _job The address of the job from which the credits are withdrawn\\n  /// @param _token The address of the token being withdrawn\\n  /// @param _amount The amount of token to be withdrawn\\n  /// @param _receiver The user that will receive tokens\\n  function withdrawTokenCreditsFromJob(\\n    address _job,\\n    address _token,\\n    uint256 _amount,\\n    address _receiver\\n  ) external;\\n\\n  /// @notice Lists liquidity pairs\\n  /// @return _list An array of addresses with all the approved liquidity pairs\\n  function approvedLiquidities() external view returns (address[] memory _list);\\n\\n  /// @notice Amount of liquidity in a specified job\\n  /// @param _job The address of the job being checked\\n  /// @param _liquidity The address of the liquidity we are checking\\n  /// @return _amount Amount of liquidity in the specified job\\n  function liquidityAmount(address _job, address _liquidity) external view returns (uint256 _amount);\\n\\n  /// @notice Last time the job was rewarded liquidity credits\\n  /// @param _job The address of the job being checked\\n  /// @return _timestamp Timestamp of the last time the job was rewarded liquidity credits\\n  function rewardedAt(address _job) external view returns (uint256 _timestamp);\\n\\n  /// @notice Last time the job was worked\\n  /// @param _job The address of the job being checked\\n  /// @return _timestamp Timestamp of the last time the job was worked\\n  function workedAt(address _job) external view returns (uint256 _timestamp);\\n\\n  /// @notice Maps the job to the owner of the job (job => user)\\n  /// @return _owner The addres of the owner of the job\\n  function jobOwner(address _job) external view returns (address _owner);\\n\\n  /// @notice Maps the owner of the job to its pending owner (job => user)\\n  /// @return _pendingOwner The address of the pending owner of the job\\n  function jobPendingOwner(address _job) external view returns (address _pendingOwner);\\n\\n  /// @notice Maps the jobs that have requested a migration to the address they have requested to migrate to\\n  /// @return _toJob The address to which the job has requested to migrate to\\n  function pendingJobMigrations(address _fromJob) external view returns (address _toJob);\\n\\n  // Methods\\n\\n  /// @notice Sets the Keep3rHelper address\\n  /// @param _keep3rHelper The Keep3rHelper address\\n  function setKeep3rHelper(address _keep3rHelper) external;\\n\\n  /// @notice Sets the Keep3rV1 address\\n  /// @param _keep3rV1 The Keep3rV1 address\\n  function setKeep3rV1(address _keep3rV1) external;\\n\\n  /// @notice Sets the Keep3rV1Proxy address\\n  /// @param _keep3rV1Proxy The Keep3rV1Proxy address\\n  function setKeep3rV1Proxy(address _keep3rV1Proxy) external;\\n\\n  /// @notice Sets the KP3R-WETH pool address\\n  /// @param _kp3rWethPool The KP3R-WETH pool address\\n  function setKp3rWethPool(address _kp3rWethPool) external;\\n\\n  /// @notice Sets the bond time required to activate as a keeper\\n  /// @param _bond The new bond time\\n  function setBondTime(uint256 _bond) external;\\n\\n  /// @notice Sets the unbond time required unbond what has been bonded\\n  /// @param _unbond The new unbond time\\n  function setUnbondTime(uint256 _unbond) external;\\n\\n  /// @notice Sets the minimum amount of liquidity required to fund a job\\n  /// @param _liquidityMinimum The new minimum amount of liquidity\\n  function setLiquidityMinimum(uint256 _liquidityMinimum) external;\\n\\n  /// @notice Sets the time required to pass between rewards for jobs\\n  /// @param _rewardPeriodTime The new amount of time required to pass between rewards\\n  function setRewardPeriodTime(uint256 _rewardPeriodTime) external;\\n\\n  /// @notice Sets the new inflation period\\n  /// @param _inflationPeriod The new inflation period\\n  function setInflationPeriod(uint256 _inflationPeriod) external;\\n\\n  /// @notice Sets the new fee\\n  /// @param _fee The new fee\\n  function setFee(uint256 _fee) external;\\n\\n  /// @notice Registers a slasher by updating the slashers mapping\\n  function addSlasher(address _slasher) external;\\n\\n  /// @notice Removes a slasher by updating the slashers mapping\\n  function removeSlasher(address _slasher) external;\\n\\n  /// @notice Registers a disputer by updating the disputers mapping\\n  function addDisputer(address _disputer) external;\\n\\n  /// @notice Removes a disputer by updating the disputers mapping\\n  function removeDisputer(address _disputer) external;\\n\\n  /// @notice Lists all jobs\\n  /// @return _jobList Array with all the jobs in _jobs\\n  function jobs() external view returns (address[] memory _jobList);\\n\\n  /// @notice Lists all keepers\\n  /// @return _keeperList Array with all the jobs in keepers\\n  function keepers() external view returns (address[] memory _keeperList);\\n\\n  /// @notice Beginning of the bonding process\\n  /// @param _bonding The asset being bound\\n  /// @param _amount The amount of bonding asset being bound\\n  function bond(address _bonding, uint256 _amount) external;\\n\\n  /// @notice Beginning of the unbonding process\\n  /// @param _bonding The asset being unbound\\n  /// @param _amount Allows for partial unbonding\\n  function unbond(address _bonding, uint256 _amount) external;\\n\\n  /// @notice End of the bonding process after bonding time has passed\\n  /// @param _bonding The asset being activated as bond collateral\\n  function activate(address _bonding) external;\\n\\n  /// @notice Withdraw funds after unbonding has finished\\n  /// @param _bonding The asset to withdraw from the bonding pool\\n  function withdraw(address _bonding) external;\\n\\n  /// @notice Allows governance to slash a keeper based on a dispute\\n  /// @param _keeper The address being slashed\\n  /// @param _bonded The asset being slashed\\n  /// @param _amount The amount being slashed\\n  function slash(\\n    address _keeper,\\n    address _bonded,\\n    uint256 _amount\\n  ) external;\\n\\n  /// @notice Blacklists a keeper from participating in the network\\n  /// @param _keeper The address being slashed\\n  function revoke(address _keeper) external;\\n\\n  /// @notice Allows any caller to add a new job\\n  /// @param _job Address of the contract for which work should be performed\\n  function addJob(address _job) external;\\n\\n  /// @notice Returns the liquidity credits of a given job\\n  /// @param _job The address of the job of which we want to know the liquidity credits\\n  /// @return _amount The liquidity credits of a given job\\n  function jobLiquidityCredits(address _job) external view returns (uint256 _amount);\\n\\n  /// @notice Returns the credits of a given job for the current period\\n  /// @param _job The address of the job of which we want to know the period credits\\n  /// @return _amount The credits the given job has at the current period\\n  function jobPeriodCredits(address _job) external view returns (uint256 _amount);\\n\\n  /// @notice Calculates the total credits of a given job\\n  /// @param _job The address of the job of which we want to know the total credits\\n  /// @return _amount The total credits of the given job\\n  function totalJobCredits(address _job) external view returns (uint256 _amount);\\n\\n  /// @notice Calculates how many credits should be rewarded periodically for a given liquidity amount\\n  /// @dev _periodCredits = underlying KP3Rs for given liquidity amount * rewardPeriod / inflationPeriod\\n  /// @param _liquidity The liquidity to provide\\n  /// @param _amount The amount of liquidity to provide\\n  /// @return _periodCredits The amount of KP3R periodically minted for the given liquidity\\n  function quoteLiquidity(address _liquidity, uint256 _amount) external view returns (uint256 _periodCredits);\\n\\n  /// @notice Observes the current state of the liquidity pair being observed and updates TickCache with the information\\n  /// @param _liquidity The liquidity pair being observed\\n  /// @return _tickCache The updated TickCache\\n  function observeLiquidity(address _liquidity) external view returns (TickCache memory _tickCache);\\n\\n  /// @notice Gifts liquidity credits to the specified job\\n  /// @param _job The address of the job being credited\\n  /// @param _amount The amount of liquidity credits to gift\\n  function forceLiquidityCreditsToJob(address _job, uint256 _amount) external;\\n\\n  /// @notice Approve a liquidity pair for being accepted in future\\n  /// @param _liquidity The address of the liquidity accepted\\n  function approveLiquidity(address _liquidity) external;\\n\\n  /// @notice Revoke a liquidity pair from being accepted in future\\n  /// @param _liquidity The liquidity no longer accepted\\n  function revokeLiquidity(address _liquidity) external;\\n\\n  /// @notice Allows anyone to fund a job with liquidity\\n  /// @param _job The address of the job to assign liquidity to\\n  /// @param _liquidity The liquidity being added\\n  /// @param _amount The amount of liquidity tokens to add\\n  function addLiquidityToJob(\\n    address _job,\\n    address _liquidity,\\n    uint256 _amount\\n  ) external;\\n\\n  /// @notice Unbond liquidity for a job\\n  /// @dev Can only be called by the job's owner\\n  /// @param _job The address of the job being unbound from\\n  /// @param _liquidity The liquidity being unbound\\n  /// @param _amount The amount of liquidity being removed\\n  function unbondLiquidityFromJob(\\n    address _job,\\n    address _liquidity,\\n    uint256 _amount\\n  ) external;\\n\\n  /// @notice Withdraw liquidity from a job\\n  /// @param _job The address of the job being withdrawn from\\n  /// @param _liquidity The liquidity being withdrawn\\n  /// @param _receiver The address that will receive the withdrawn liquidity\\n  function withdrawLiquidityFromJob(\\n    address _job,\\n    address _liquidity,\\n    address _receiver\\n  ) external;\\n\\n  /// @notice Confirms if the current keeper is registered, can be used for general (non critical) functions\\n  /// @param _keeper The keeper being investigated\\n  /// @return _isKeeper Whether the address passed as a parameter is a keeper or not\\n  function isKeeper(address _keeper) external returns (bool _isKeeper);\\n\\n  /// @notice Confirms if the current keeper is registered and has a minimum bond of any asset. Should be used for protected functions\\n  /// @param _keeper The keeper to check\\n  /// @param _bond The bond token being evaluated\\n  /// @param _minBond The minimum amount of bonded tokens\\n  /// @param _earned The minimum funds earned in the keepers lifetime\\n  /// @param _age The minimum keeper age required\\n  /// @return _isBondedKeeper Whether the `_keeper` meets the given requirements\\n  function isBondedKeeper(\\n    address _keeper,\\n    address _bond,\\n    uint256 _minBond,\\n    uint256 _earned,\\n    uint256 _age\\n  ) external returns (bool _isBondedKeeper);\\n\\n  /// @notice Implemented by jobs to show that a keeper performed work\\n  /// @dev Automatically calculates the payment for the keeper\\n  /// @param _keeper Address of the keeper that performed the work\\n  function worked(address _keeper) external;\\n\\n  /// @notice Implemented by jobs to show that a keeper performed work\\n  /// @dev Pays the keeper that performs the work with KP3R\\n  /// @param _keeper Address of the keeper that performed the work\\n  /// @param _payment The reward that should be allocated for the job\\n  function bondedPayment(address _keeper, uint256 _payment) external;\\n\\n  /// @notice Implemented by jobs to show that a keeper performed work\\n  /// @dev Pays the keeper that performs the work with a specific token\\n  /// @param _token The asset being awarded to the keeper\\n  /// @param _keeper Address of the keeper that performed the work\\n  /// @param _amount The reward that should be allocated\\n  function directTokenPayment(\\n    address _token,\\n    address _keeper,\\n    uint256 _amount\\n  ) external;\\n\\n  /// @notice Proposes a new address to be the owner of the job\\n  function changeJobOwnership(address _job, address _newOwner) external;\\n\\n  /// @notice The proposed address accepts to be the owner of the job\\n  function acceptJobOwnership(address _job) external;\\n\\n  /// @notice Initializes the migration process for a job by adding the request to the pendingJobMigrations mapping\\n  /// @param _fromJob The address of the job that is requesting to migrate\\n  /// @param _toJob The address at which the job is requesting to migrate\\n  function migrateJob(address _fromJob, address _toJob) external;\\n\\n  /// @notice Completes the migration process for a job\\n  /// @dev Unbond/withdraw process doesn't get migrated\\n  /// @param _fromJob The address of the job that requested to migrate\\n  /// @param _toJob The address to which the job wants to migrate to\\n  function acceptJobMigration(address _fromJob, address _toJob) external;\\n\\n  /// @notice Allows governance or slasher to slash a job specific token\\n  /// @param _job The address of the job from which the token will be slashed\\n  /// @param _token The address of the token that will be slashed\\n  /// @param _amount The amount of the token that will be slashed\\n  function slashTokenFromJob(\\n    address _job,\\n    address _token,\\n    uint256 _amount\\n  ) external;\\n\\n  /// @notice Allows governance or a slasher to slash liquidity from a job\\n  /// @param _job The address being slashed\\n  /// @param _liquidity The address of the liquidity that will be slashed\\n  /// @param _amount The amount of liquidity that will be slashed\\n  function slashLiquidityFromJob(\\n    address _job,\\n    address _liquidity,\\n    uint256 _amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa44783babc800d4836052ef0fcb1853eaf2dc41983ba3e8b066e35b7f7b193e6\",\"license\":\"MIT\"},\"solidity/interfaces/external/IStealthRelayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport './IStealthTx.sol';\\n\\ninterface IStealthRelayer is IStealthTx {\\n  function caller() external view returns (address _caller);\\n\\n  function forceBlockProtection() external view returns (bool _forceBlockProtection);\\n\\n  function jobs() external view returns (address[] memory _jobsList);\\n\\n  function setForceBlockProtection(bool _forceBlockProtection) external;\\n\\n  function addJobs(address[] calldata _jobsList) external;\\n\\n  function addJob(address _job) external;\\n\\n  function removeJobs(address[] calldata _jobsList) external;\\n\\n  function removeJob(address _job) external;\\n\\n  function execute(\\n    address _address,\\n    bytes memory _callData,\\n    bytes32 _stealthHash,\\n    uint256 _blockNumber\\n  ) external payable returns (bytes memory _returnData);\\n\\n  function executeAndPay(\\n    address _address,\\n    bytes memory _callData,\\n    bytes32 _stealthHash,\\n    uint256 _blockNumber,\\n    uint256 _payment\\n  ) external payable returns (bytes memory _returnData);\\n\\n  function executeWithoutBlockProtection(\\n    address _address,\\n    bytes memory _callData,\\n    bytes32 _stealthHash\\n  ) external payable returns (bytes memory _returnData);\\n\\n  function executeWithoutBlockProtectionAndPay(\\n    address _job,\\n    bytes memory _callData,\\n    bytes32 _stealthHash,\\n    uint256 _payment\\n  ) external payable returns (bytes memory _returnData);\\n}\\n\",\"keccak256\":\"0xdedb9aebd2fb4b0e63b5606acd1e65a981ac22ea2fa6b2a78bcfe897c5c0fd2b\",\"license\":\"MIT\"},\"solidity/interfaces/external/IStealthTx.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\ninterface IStealthTx {\\n  event StealthVaultSet(address _stealthVault);\\n  event PenaltySet(uint256 _penalty);\\n  event MigratedStealthVault(address _migratedTo);\\n\\n  function stealthVault() external view returns (address);\\n\\n  function penalty() external view returns (uint256);\\n\\n  function setStealthVault(address _stealthVault) external;\\n\\n  function setPenalty(uint256 _penalty) external;\\n}\\n\",\"keccak256\":\"0x17b14cbcc90f5ba2f6e2166604d759ab9ccf174cc3412a0059faf3b19640f9a2\",\"license\":\"MIT\"},\"solidity/interfaces/external/IV2Keeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\ninterface IV2Keeper {\\n  // Getters\\n  function jobs() external view returns (address[] memory);\\n\\n  event JobAdded(address _job);\\n  event JobRemoved(address _job);\\n\\n  // Setters\\n  function addJobs(address[] calldata _jobs) external;\\n\\n  function addJob(address _job) external;\\n\\n  function removeJob(address _job) external;\\n\\n  // Jobs actions\\n  function tend(address _strategy) external;\\n\\n  function harvest(address _strategy) external;\\n}\\n\",\"keccak256\":\"0xdb7e3afc3d6d75a61ed21f4bf8150d5739cc243e290b713fc32cbd59426d05ca\",\"license\":\"MIT\"},\"solidity/interfaces/utils/IBaseErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface IBaseErrors {\\n  /// @notice Throws if a variable is assigned to the zero address\\n  error ZeroAddress();\\n\\n  /// @notice Throws if a set of correlated input param arrays differ in lengths\\n  error WrongLengths();\\n}\\n\",\"keccak256\":\"0x182136aa0b9df2580baa0d893dbaea04f6aecb411bdb1cef754a56a5ece5ca02\",\"license\":\"MIT\"},\"solidity/interfaces/utils/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport './IBaseErrors.sol';\\n\\ninterface IGovernable is IBaseErrors {\\n  // events\\n\\n  /// @notice Emitted when a new pending governor is set\\n  /// @param _governor Address of the current governor\\n  /// @param _pendingGovernor Address of the proposed next governor\\n  event PendingGovernorSet(address _governor, address _pendingGovernor);\\n\\n  /// @notice Emitted when a new governor is set\\n  /// @param _newGovernor Address of the new governor\\n  event PendingGovernorAccepted(address _newGovernor);\\n\\n  // errors\\n\\n  /// @notice Throws if a non-governor user tries to call a OnlyGovernor function\\n  error OnlyGovernor();\\n  /// @notice Throws if a non-pending-governor user tries to call a OnlyPendingGovernor function\\n  error OnlyPendingGovernor();\\n\\n  // views\\n\\n  /// @return _governor Address of the current governor\\n  function governor() external view returns (address _governor);\\n\\n  /// @return _pendingGovernor Address of the current pending governor\\n  function pendingGovernor() external view returns (address _pendingGovernor);\\n\\n  // methods\\n\\n  /// @notice Allows a governor to propose a new governor\\n  /// @param _pendingGovernor Address of the proposed new governor\\n  function setPendingGovernor(address _pendingGovernor) external;\\n\\n  /// @notice Allows a proposed governor to accept the governance\\n  function acceptPendingGovernor() external;\\n}\\n\",\"keccak256\":\"0x1b3b3b30d2ca3a8efcaf7e5162de36a0e7964de617d925c8094d79fd8826573e\",\"license\":\"MIT\"},\"solidity/interfaces/utils/IKeep3rBondedJob.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport './IKeep3rJob.sol';\\n\\ninterface IKeep3rBondedJob is IKeep3rJob {\\n  // events\\n\\n  /// @notice Emitted when a new set of requirements is set\\n  /// @param _bond Address of the token required to bond to work the job\\n  /// @param _minBond Amount of tokens required to bond to work the job\\n  /// @param _earned Amount of KP3R earnings required to work the job\\n  /// @param _age Amount of seconds since keeper registration required to work the job\\n  event Keep3rRequirementsSet(address _bond, uint256 _minBond, uint256 _earned, uint256 _age);\\n\\n  // views\\n\\n  /// @return _requiredBond Address of the token required to bond to work the job\\n  function requiredBond() external view returns (address _requiredBond);\\n\\n  /// @return _requiredMinBond Amount of tokens required to bond to work the job\\n  function requiredMinBond() external view returns (uint256 _requiredMinBond);\\n\\n  /// @return _requiredEarnings Amount of KP3R earnings required to work the job\\n  function requiredEarnings() external view returns (uint256 _requiredEarnings);\\n\\n  /// @return _requiredAge Amount of seconds since keeper registration required to work the job\\n  function requiredAge() external view returns (uint256 _requiredAge);\\n\\n  // methods\\n\\n  /// @notice Allows the governor to set new requirements to work the job\\n  /// @param _bond Address of the token required to bond to work the job\\n  /// @param _minBond Amount of tokens required to bond to work the job\\n  /// @param _earned Amount of KP3R earnings required to work the job\\n  /// @param _age Amount of seconds since keeper registration required to work the job\\n  function setKeep3rRequirements(\\n    address _bond,\\n    uint256 _minBond,\\n    uint256 _earned,\\n    uint256 _age\\n  ) external;\\n}\\n\",\"keccak256\":\"0x4034154277ead1cd15262ab1156b793be8136b71c1a111fc9a6959b5f1da7bce\",\"license\":\"MIT\"},\"solidity/interfaces/utils/IKeep3rJob.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport './IGovernable.sol';\\n\\ninterface IKeep3rJob is IGovernable {\\n  // events\\n\\n  /// @notice Emitted when a new Keep3r contract is set\\n  /// @param _keep3r Address of the new Keep3r contract\\n  event Keep3rSet(address _keep3r);\\n\\n  // errors\\n\\n  /// @notice Throws when a keeper fails the validation\\n  error KeeperNotValid();\\n\\n  // views\\n\\n  /// @return _keep3r Address of the Keep3r contract\\n  function keep3r() external view returns (address _keep3r);\\n\\n  // methods\\n\\n  /// @notice Allows governor to set a new Keep3r contract\\n  /// @param _keep3r Address of the new Keep3r contract\\n  function setKeep3r(address _keep3r) external;\\n}\\n\",\"keccak256\":\"0x84e2d5bac114322ff5917006204b17c390fb45f0e1b0553e22e146dc2772d459\",\"license\":\"MIT\"},\"solidity/interfaces/utils/IKeep3rMeteredJob.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport './IKeep3rJob.sol';\\n\\ninterface IKeep3rMeteredJob is IKeep3rJob {\\n  // events\\n\\n  /// @notice Emitted when a new Keep3rHelper contract is set\\n  /// @param _keep3rHelper Address of the new Keep3rHelper contract\\n  event Keep3rHelperSet(address _keep3rHelper);\\n\\n  /// @notice Emitted when a new gas bonus amount is set\\n  /// @param _gasBonus Amount of gas to add to cover unaccounted gas\\n  event GasBonusSet(uint256 _gasBonus);\\n\\n  /// @notice Emitted when a new gas bonus multiplier is set\\n  /// @param _gasMultiplier Multiplier that boosts gas record to calculate the keeper reward\\n  event GasMultiplierSet(uint256 _gasMultiplier);\\n\\n  /// @notice Emitted when a new gas bonus multiplier maximum is set\\n  /// @param _maxMultiplier Maximum acceptable gasMultiplier to be set\\n  event MaxMultiplierSet(uint256 _maxMultiplier);\\n\\n  /// @notice Emitted when a metered job is worked\\n  /// @param _initialGas First gas record registered\\n  /// @param _gasAfterWork Gas record registered after work\\n  /// @param _bonus Fixed amount of gas added to the accountance\\n  event GasMetered(uint256 _initialGas, uint256 _gasAfterWork, uint256 _bonus);\\n\\n  // errors\\n  error MaxMultiplier();\\n\\n  // views\\n\\n  /// @return _keep3rHelper Address of the Keep3rHelper contract\\n  function keep3rHelper() external view returns (address _keep3rHelper);\\n\\n  /// @return _gasBonus Amount of gas to add to cover unaccounted gas\\n  function gasBonus() external view returns (uint256 _gasBonus);\\n\\n  /// @return _gasMultiplier Multiplier that boosts gas record to calculate the keeper reward\\n  function gasMultiplier() external view returns (uint256 _gasMultiplier);\\n\\n  /// @return _maxMultiplier Maximum acceptable gasMultiplier to be set\\n  function maxMultiplier() external view returns (uint256 _maxMultiplier);\\n\\n  // solhint-disable-next-line func-name-mixedcase, var-name-mixedcase\\n  function BASE() external view returns (uint32 _BASE);\\n\\n  // methods\\n\\n  /// @notice Allows governor to set a new Keep3rHelper contract\\n  /// @param _keep3rHelper Address of the new Keep3rHelper contract\\n  function setKeep3rHelper(address _keep3rHelper) external;\\n\\n  /// @notice Allows governor to set a new gas bonus amount\\n  /// @param _gasBonus New amount of gas to add to cover unaccounted gas\\n  function setGasBonus(uint256 _gasBonus) external;\\n\\n  /// @notice Allows governor to set a new gas multiplier\\n  /// @param _gasMultiplier New multiplier that boosts gas record to calculate the keeper reward\\n  function setGasMultiplier(uint256 _gasMultiplier) external;\\n\\n  /// @notice Allows governor to set a new gas multiplier maximum\\n  /// @param _maxMultiplier New maximum acceptable gasMultiplier to be set\\n  function setMaxMultiplier(uint256 _maxMultiplier) external;\\n}\\n\",\"keccak256\":\"0x85a5957ba61f84d7678897385978154ecbd9ff1a7c67898c1e44f00dd643e14e\",\"license\":\"MIT\"},\"solidity/interfaces/utils/IKeep3rStealthJob.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport './IKeep3rJob.sol';\\n\\ninterface IKeep3rStealthJob is IKeep3rJob {\\n  // events\\n\\n  /// @notice Emitted when a new StealthRelayer contract is set\\n  /// @param _stealthRelayer Address of the new StealthRelayer contract\\n  event StealthRelayerSet(address _stealthRelayer);\\n\\n  // errors\\n\\n  /// @notice Throws when a OnlyStealthRelayer function is called from an unknown address\\n  error OnlyStealthRelayer();\\n\\n  // views\\n\\n  /// @return _stealthRelayer Address of the StealthRelayer contract\\n  function stealthRelayer() external view returns (address _stealthRelayer);\\n\\n  // methods\\n\\n  /// @notice Allows governor to set a new StealthRelayer contract\\n  /// @param _stealthRelayer Address of the new StealthRelayer contract\\n  function setStealthRelayer(address _stealthRelayer) external;\\n}\\n\",\"keccak256\":\"0x28e64d6dc5074372c01fd684fbb04a5b4005c7af1182f6e9fbdc29173418245c\",\"license\":\"MIT\"},\"solidity/interfaces/utils/IOnlyEOA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface IOnlyEOA {\\n  // events\\n\\n  /// @notice Emitted when onlyEOA is set\\n  event OnlyEOASet(bool _onlyEOA);\\n\\n  // errors\\n\\n  /// @notice Throws when keeper is not tx.origin\\n  error OnlyEOA();\\n\\n  // views\\n\\n  /// @return _onlyEOA Whether the keeper is required to be an EOA or not\\n  function onlyEOA() external returns (bool _onlyEOA);\\n\\n  // methods\\n\\n  /// @notice Allows governor to set the onlyEOA condition\\n  /// @param _onlyEOA Whether the keeper is required to be an EOA or not\\n  function setOnlyEOA(bool _onlyEOA) external;\\n}\\n\",\"keccak256\":\"0x7824d1c97c7ee77ab33cd683995ad29962108e4d075a0d4ef675a548af07025b\",\"license\":\"MIT\"},\"solidity/interfaces/utils/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport './IGovernable.sol';\\n\\ninterface IPausable is IGovernable {\\n  // events\\n\\n  /// @notice Emitted when the contract pause is switched\\n  /// @param _paused Whether the contract is paused or not\\n  event PauseSet(bool _paused);\\n\\n  // errors\\n\\n  /// @notice Throws when a keeper tries to work a paused contract\\n  error Paused();\\n\\n  /// @notice Throws when governor tries to switch pause to the same state as before\\n  error NoChangeInPause();\\n\\n  // views\\n\\n  /// @return _paused Whether the contract is paused or not\\n  function paused() external view returns (bool _paused);\\n\\n  // methods\\n\\n  /// @notice Allows governor to pause or unpause the contract\\n  /// @param _paused Whether the contract should be paused or not\\n  function setPause(bool _paused) external;\\n}\\n\",\"keccak256\":\"0xe588c9b4d2d34ad84635955f0519bdee8d03471d0da6f4194939a7d016965648\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526009805474eb02addcfd8b773a5ffa6b9d1fe99c566f8c44cc00610100600160a81b0319909116179055600a80546001600160a01b031990811673edde080e28eb53532bd1804de51bd9cd5cadf0d41790915562018e70600b55612710600c55613a98600d55600e8054909116731ceb5cb57c4d4e2b2433641b95dd330a33185a441790556802b5e3af16b1880000600f55348015620000a357600080fd5b506040516200227d3803806200227d833981016040819052620000c69162000473565b600080546001600160a01b0319166001600160a01b038d161790558b898c8a81846001600160a01b0381166200010f5760405163d92e233d60e01b815260040160405180910390fd5b600180546001600160a01b03199081166001600160a01b03938416179091556003805490911691861691909117905550801562000151576200015181620001e0565b5050505062000166876200020760201b60201c565b620001718662000264565b6200017c8a620002b3565b6200018a858585856200030a565b620001958162000384565b620001a362022f60620003c6565b620001ce6103e8600c54610352620001bc91906200054c565b620001c891906200057a565b620003fc565b5050505050505050505050506200059d565b806000036200020257604051636972b64d60e01b815260040160405180910390fd5b600855565b60098054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527f0fec338132ef1fa68cd11242357e5e5e5af67dfd0c957b53ef411bca535817ef906020015b60405180910390a150565b600a80546001600160a01b0319166001600160a01b0383169081179091556040519081527f77e14ebc8982ca2b21d8410b77a6ca8a857864dfab5d337f154fbacea73c11919060200162000259565b60128054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527f4803a65acc131d65526972ad19dbfa7490ed1f24f6ece0c71f4898d86a01b69b9060200162000259565b600e80546001600160a01b0319166001600160a01b038616908117909155600f8490556010839055601182905560408051918252602082018590528101839052606081018290527fadc260414d0381ec9727c6f819aa0ebe789ad81016c176765f40d3bc301e5d6b9060800160405180910390a150505050565b6012805460ff19168215159081179091556040519081527fa9bf0ee725a8887f07a03c36e33aa100bb0218d44b9fff855be8504c480ab99b9060200162000259565b600b8190556040518181527f6c434ba0e7a3588c2330d8f479f247d9269f069a8d630dbb2cb60a7382a487f09060200162000259565b600d54811115620004205760405163cd9ba70160e01b815260040160405180910390fd5b600c8190556040518181527f2985ceccbff6f8695faca980a17eb9a590d2f080d024f944d3c7743ba038c3999060200162000259565b80516001600160a01b03811681146200046e57600080fd5b919050565b6000806000806000806000806000806000806101808d8f0312156200049757600080fd5b620004a28d62000456565b9b50620004b260208e0162000456565b9a50620004c260408e0162000456565b9950620004d260608e0162000456565b985060808d01519750620004e960a08e0162000456565b9650620004f960c08e0162000456565b95506200050960e08e0162000456565b94506101008d015193506101208d015192506101408d015191506101608d015180151581146200053857600080fd5b809150509295989b509295989b509295989b565b60008160001904831182151516156200057557634e487b7160e01b600052601160045260246000fd5b500290565b6000826200059857634e487b7160e01b600052601260045260246000fd5b500490565b611cd080620005ad6000396000f3fe608060405234801561001057600080fd5b506004361061027f5760003560e01c806372da828a1161015c578063d9f9027f116100ce578063ef47da6d11610087578063ef47da6d1461057e578063f11a1d1a14610591578063f235757f146105a4578063f7ac5fc6146105b7578063fb2a410a146105ca578063fbea5709146105d757600080fd5b8063d9f9027f14610513578063dd7ba42014610528578063e06a7cb91461053b578063e3056a3414610544578063ea3c2b9c14610557578063ec342ad01461056057600080fd5b806390f296431161012057806390f29643146104a157806392b3b265146104b45780639f471303146104c7578063b9a52e28146104da578063bedb86fb146104ed578063c9411e221461050057600080fd5b806372da828a1461044c57806373da47c81461045f57806374c2ca8314610468578063780b5c231461047b5780638c9341f11461048e57600080fd5b806326e6cd26116101f55780635905b407116101b95780635905b407146103df5780635c975abb146103f257806362ba54a91461040f578063634c7bb51461041857806365834acc146104305780636b1b6e3e1461044357600080fd5b806326e6cd261461037357806328584aa71461038657806336df7ea5146103a65780633ff8bbf6146103b95780634cc18e57146103cc57600080fd5b806313f6986d1161024757806313f6986d1461031157806314f29a1d1461031957806316ea58da1461032c578063175188e814610335578063259428a01461034857806325fc3b221461036057600080fd5b806301526a43146102845780630187aea0146102995780630c340a24146102b557806310262803146102e05780631078f38814610300575b600080fd5b610297610292366004611984565b6105ea565b005b6102a2600d5481565b6040519081526020015b60405180910390f35b6001546102c8906001600160a01b031681565b6040516001600160a01b0390911681526020016102ac565b6102a26102ee3660046119b2565b60076020526000908152604090205481565b6000546001600160a01b03166102c8565b610297610621565b610297610327366004611984565b610656565b6102a2600b5481565b6102976103433660046119b2565b61068a565b6012546102c89061010090046001600160a01b031681565b61029761036e366004611a1b565b61069c565b6102976103813660046119b2565b610731565b6102a26103943660046119b2565b60066020526000908152604090205481565b6102976103b43660046119b2565b61077a565b600e546102c8906001600160a01b031681565b6102976103da3660046119b2565b6109eb565b6102976103ed366004611a87565b610a1f565b6009546103ff9060ff1681565b60405190151581526020016102ac565b6102a260105481565b6009546102c89061010090046001600160a01b031681565b6103ff61043e3660046119b2565b610a5c565b6102a260115481565b61029761045a3660046119b2565b610ad2565b6102a2600f5481565b610297610476366004611984565b610b06565b610297610489366004611ad0565b610b18565b61029761049c3660046119b2565b610b4c565b6102976104af366004611984565b610b80565b6003546102c8906001600160a01b031681565b6103ff6104d53660046119b2565b610bb4565b6102976104e8366004611aed565b610bbf565b6102976104fb366004611ad0565b610bd6565b61029761050e366004611aed565b610c0a565b61051b610c1d565b6040516102ac9190611b19565b6102976105363660046119b2565b610ccc565b6102a260085481565b6002546102c8906001600160a01b031681565b6102a2600c5481565b61056961271081565b60405163ffffffff90911681526020016102ac565b61029761058c3660046119b2565b610d89565b600a546102c8906001600160a01b031681565b6102976105b23660046119b2565b610dd2565b6102976105c53660046119b2565b610e06565b6012546103ff9060ff1681565b6102976105e5366004611a1b565b610e18565b6001546001600160a01b031633146106155760405163070545c960e51b815260040160405180910390fd5b61061e81610ea6565b50565b6002546001600160a01b0316331461064c57604051639ba0305d60e01b815260040160405180910390fd5b610654610ee2565b565b6001546001600160a01b031633146106815760405163070545c960e51b815260040160405180910390fd5b61061e81610f40565b61069333610f98565b61061e81610fda565b6106a533610f98565b8281146106c5576040516381e4d28d60e01b815260040160405180910390fd5b60005b8381101561072a576107188585838181106106e5576106e5611b66565b90506020020160208101906106fa91906119b2565b84848481811061070c5761070c611b66565b90506020020135611060565b8061072281611b92565b9150506106c8565b5050505050565b6001546001600160a01b0316331461075c5760405163070545c960e51b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b03831617905550565b60006107846110f6565b60125490915061010090046001600160a01b031633146107b7576040516332ca9ab360e11b815260040160405180910390fd5b6000601260019054906101000a90046001600160a01b03166001600160a01b031663fc9c8d396040518163ffffffff1660e01b8152600401602060405180830381865afa15801561080c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108309190611bab565b905061083b81611115565b60095460ff161561085f576040516313d0ff5960e31b815260040160405180910390fd5b61086883611132565b60006108726110f6565b600a54600b549192506000916001600160a01b0390911690632248e82d90859061089c8689611bc8565b6108a69190611bdf565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa1580156108ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109139190611bf7565b600c54909150612710906109279083611c10565b6109319190611c2f565b6009546040516308a336b960e11b81526001600160a01b03868116600483015260248201849052929350610100909104909116906311466d7290604401600060405180830381600087803b15801561098857600080fd5b505af115801561099c573d6000803e3d6000fd5b5050600b54604080518881526020810187905280820192909252517f5b3acbf5cbe55940e1bd9235bb985ccca97e9028d7489290f08e6504e76b88d39350908190036060019150a15050505050565b6001546001600160a01b03163314610a165760405163070545c960e51b815260040160405180910390fd5b61061e816111b5565b6001546001600160a01b03163314610a4a5760405163070545c960e51b815260040160405180910390fd5b610a568484848461120b565b50505050565b60008054604051631960d2b360e21b81526001600160a01b038481166004830152909116906365834acc906024015b602060405180830381865afa158015610aa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acc9190611c51565b92915050565b6001546001600160a01b03163314610afd5760405163070545c960e51b815260040160405180910390fd5b61061e81611285565b610b0f33610f98565b61061e816112d3565b6001546001600160a01b03163314610b435760405163070545c960e51b815260040160405180910390fd5b61061e816112f9565b6001546001600160a01b03163314610b775760405163070545c960e51b815260040160405180910390fd5b61061e8161133a565b6001546001600160a01b03163314610bab5760405163070545c960e51b815260040160405180910390fd5b61061e81611390565b6000610acc826113c5565b610bc833610f98565b610bd28282611412565b5050565b6001546001600160a01b03163314610c015760405163070545c960e51b815260040160405180910390fd5b61061e8161149b565b610c1333610f98565b610bd28282611060565b6060610c296004611507565b67ffffffffffffffff811115610c4157610c41611c6e565b604051908082528060200260200182016040528015610c6a578160200160208202803683370190505b50905060005b610c7a6004611507565b811015610cc857610c8c600482611511565b828281518110610c9e57610c9e611b66565b6001600160a01b039092166020928302919091019091015280610cc081611b92565b915050610c70565b5090565b60125461010090046001600160a01b03163314610cfc576040516332ca9ab360e11b815260040160405180910390fd5b6000601260019054906101000a90046001600160a01b03166001600160a01b031663fc9c8d396040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d759190611bab565b9050610d8081610f98565b610bd282611524565b6001546001600160a01b03163314610db45760405163070545c960e51b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b03831617905550565b6001546001600160a01b03163314610dfd5760405163070545c960e51b815260040160405180910390fd5b61061e81611566565b610e0f33610f98565b61061e81611524565b610e2133610f98565b828114610e41576040516381e4d28d60e01b815260040160405180910390fd5b60005b8381101561072a57610e94858583818110610e6157610e61611b66565b9050602002016020810190610e7691906119b2565b848484818110610e8857610e88611b66565b90506020020135611412565b80610e9e81611b92565b915050610e44565b600d8190556040518181527fad852bc3e1d8ed93d9b2d9290bdb1d945c12994fd7b826f5ff91ec56245aefda906020015b60405180910390a150565b60028054600180546001600160a01b0383166001600160a01b031991821681179092559091169091556040519081527f5d5d6e01b731c3e68060f7fe13156f6197d4aeffc2d6f498e34c717ae616b7349060200160405180910390a1565b600d54811115610f635760405163cd9ba70160e01b815260040160405180910390fd5b600c8190556040518181527f2985ceccbff6f8695faca980a17eb9a590d2f080d024f944d3c7743ba038c39990602001610ed7565b6001546001600160a01b03828116911614801590610fbc5750610fba81610a5c565b155b1561061e576040516306a22f2960e01b815260040160405180910390fd5b610fe56004826115e9565b61100257604051638716f5eb60e01b815260040160405180910390fd5b6001600160a01b03811660009081526006602052604081205561102660048261160b565b506040516001600160a01b03821681527f09a1db4b80c32706328728508c941a6b954f31eb5affd32f236c1fd405f8fea490602001610ed7565b61106b6004836115e9565b156110895760405163165e236760e01b815260040160405180910390fd5b6001600160a01b0382166000908152600660205260409020819055604080516001600160a01b0384168152602081018390527f2f564a83158ad1831793ad3e69257b52f39ece5d49cb0d8746708ecb9ef964da910160405180910390a16110f1600483611620565b505050565b6000603f5a611106906040611c10565b6111109190611c2f565b905090565b60125460ff16156111295761112981611635565b61061e8161165e565b61113b816113c5565b611158576040516398ae0b2160e01b815260040160405180910390fd5b6001600160a01b038116600090815260076020526040902042905561117c81611718565b6040516001600160a01b03821681527fac848b4596fbd35b139e8ee158748a1c8091becf3e830c628b4a79ad869d170290602001610ed7565b60098054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527f0fec338132ef1fa68cd11242357e5e5e5af67dfd0c957b53ef411bca535817ef90602001610ed7565b600e80546001600160a01b0319166001600160a01b038616908117909155600f8490556010839055601182905560408051918252602082018590528101839052606081018290527fadc260414d0381ec9727c6f819aa0ebe789ad81016c176765f40d3bc301e5d6b9060800160405180910390a150505050565b600a80546001600160a01b0319166001600160a01b0383169081179091556040519081527f77e14ebc8982ca2b21d8410b77a6ca8a857864dfab5d337f154fbacea73c119190602001610ed7565b806000036112f457604051636972b64d60e01b815260040160405180910390fd5b600855565b6012805460ff19168215159081179091556040519081527fa9bf0ee725a8887f07a03c36e33aa100bb0218d44b9fff855be8504c480ab99b90602001610ed7565b60128054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527f4803a65acc131d65526972ad19dbfa7490ed1f24f6ece0c71f4898d86a01b69b90602001610ed7565b600b8190556040518181527f6c434ba0e7a3588c2330d8f479f247d9269f069a8d630dbb2cb60a7382a487f090602001610ed7565b60006113d082611773565b6113dc57506000919050565b816001600160a01b031663ed882c2b6113f4846117e5565b6040518263ffffffff1660e01b8152600401610a8b91815260200190565b61141d6004836115e9565b61143a57604051638716f5eb60e01b815260040160405180910390fd5b6001600160a01b0382166000908152600660205260409020819055604080516001600160a01b0384168152602081018390527fe4471c38177bd412e0358beccddbe74bad9465520f4f24a76c013bd404b0b0de910160405180910390a15050565b60095481151560ff9091161515036114c6576040516337fe120d60e21b815260040160405180910390fd5b6009805460ff19168215159081179091556040519081527f878ac8a2ca79520471f8f3c8494fa802c03ce3bf034252aad7f22318984fdbdb90602001610ed7565b6000610acc825490565b600061151d8383611818565b9392505050565b61152d81611718565b6040516001600160a01b03821681527fee8d688761ac1d0fda49e2ac999f0e46b3beaf16857a8e8905aeab2987dc8d3890602001610ed7565b6001600160a01b03811661158d5760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b038381169182179092556001546040805191909316815260208101919091527f6353ec38ac394f8be94bfafcdd3580d356470599059eaeebedc3207e1cc03dec9101610ed7565b6001600160a01b0381166000908152600183016020526040812054151561151d565b600061151d836001600160a01b038416611842565b600061151d836001600160a01b038416611935565b6001600160a01b038116321461061e57604051639f8129d160e01b815260040160405180910390fd5b600954600e54600f54601054601154604051637cea367960e11b81526001600160a01b0387811660048301529485166024820152604481019390935260648301919091526084820152610100909204169063f9d46cf29060a4016020604051808303816000875af11580156116d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fb9190611c51565b61061e57604051636959565560e11b815260040160405180910390fd5b60035460405163072e008f60e11b81526001600160a01b03838116600483015290911690630e5c011e90602401600060405180830381600087803b15801561175f57600080fd5b505af115801561072a573d6000803e3d6000fd5b60006117806004836115e9565b61179d57604051638716f5eb60e01b815260040160405180910390fd5b60085415806117d057506008546001600160a01b0383166000908152600760205260409020546117cd9190611bdf565b42115b156117dd57506001919050565b506000919050565b6001600160a01b03811660009081526006602052604081205480820361180e5750600092915050565b61151d4882611c10565b600082600001828154811061182f5761182f611b66565b9060005260206000200154905092915050565b6000818152600183016020526040812054801561192b576000611866600183611bc8565b855490915060009061187a90600190611bc8565b90508181146118df57600086600001828154811061189a5761189a611b66565b90600052602060002001549050808760000184815481106118bd576118bd611b66565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806118f0576118f0611c84565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610acc565b6000915050610acc565b600081815260018301602052604081205461197c57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610acc565b506000610acc565b60006020828403121561199657600080fd5b5035919050565b6001600160a01b038116811461061e57600080fd5b6000602082840312156119c457600080fd5b813561151d8161199d565b60008083601f8401126119e157600080fd5b50813567ffffffffffffffff8111156119f957600080fd5b6020830191508360208260051b8501011115611a1457600080fd5b9250929050565b60008060008060408587031215611a3157600080fd5b843567ffffffffffffffff80821115611a4957600080fd5b611a55888389016119cf565b90965094506020870135915080821115611a6e57600080fd5b50611a7b878288016119cf565b95989497509550505050565b60008060008060808587031215611a9d57600080fd5b8435611aa88161199d565b966020860135965060408601359560600135945092505050565b801515811461061e57600080fd5b600060208284031215611ae257600080fd5b813561151d81611ac2565b60008060408385031215611b0057600080fd5b8235611b0b8161199d565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b81811015611b5a5783516001600160a01b031683529284019291840191600101611b35565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611ba457611ba4611b7c565b5060010190565b600060208284031215611bbd57600080fd5b815161151d8161199d565b600082821015611bda57611bda611b7c565b500390565b60008219821115611bf257611bf2611b7c565b500190565b600060208284031215611c0957600080fd5b5051919050565b6000816000190483118215151615611c2a57611c2a611b7c565b500290565b600082611c4c57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611c6357600080fd5b815161151d81611ac2565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603160045260246000fdfea26469706673582212204a835b14df49a425243762b6ae5dfb978395477804b405fb5332c16813e850f364736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061027f5760003560e01c806372da828a1161015c578063d9f9027f116100ce578063ef47da6d11610087578063ef47da6d1461057e578063f11a1d1a14610591578063f235757f146105a4578063f7ac5fc6146105b7578063fb2a410a146105ca578063fbea5709146105d757600080fd5b8063d9f9027f14610513578063dd7ba42014610528578063e06a7cb91461053b578063e3056a3414610544578063ea3c2b9c14610557578063ec342ad01461056057600080fd5b806390f296431161012057806390f29643146104a157806392b3b265146104b45780639f471303146104c7578063b9a52e28146104da578063bedb86fb146104ed578063c9411e221461050057600080fd5b806372da828a1461044c57806373da47c81461045f57806374c2ca8314610468578063780b5c231461047b5780638c9341f11461048e57600080fd5b806326e6cd26116101f55780635905b407116101b95780635905b407146103df5780635c975abb146103f257806362ba54a91461040f578063634c7bb51461041857806365834acc146104305780636b1b6e3e1461044357600080fd5b806326e6cd261461037357806328584aa71461038657806336df7ea5146103a65780633ff8bbf6146103b95780634cc18e57146103cc57600080fd5b806313f6986d1161024757806313f6986d1461031157806314f29a1d1461031957806316ea58da1461032c578063175188e814610335578063259428a01461034857806325fc3b221461036057600080fd5b806301526a43146102845780630187aea0146102995780630c340a24146102b557806310262803146102e05780631078f38814610300575b600080fd5b610297610292366004611984565b6105ea565b005b6102a2600d5481565b6040519081526020015b60405180910390f35b6001546102c8906001600160a01b031681565b6040516001600160a01b0390911681526020016102ac565b6102a26102ee3660046119b2565b60076020526000908152604090205481565b6000546001600160a01b03166102c8565b610297610621565b610297610327366004611984565b610656565b6102a2600b5481565b6102976103433660046119b2565b61068a565b6012546102c89061010090046001600160a01b031681565b61029761036e366004611a1b565b61069c565b6102976103813660046119b2565b610731565b6102a26103943660046119b2565b60066020526000908152604090205481565b6102976103b43660046119b2565b61077a565b600e546102c8906001600160a01b031681565b6102976103da3660046119b2565b6109eb565b6102976103ed366004611a87565b610a1f565b6009546103ff9060ff1681565b60405190151581526020016102ac565b6102a260105481565b6009546102c89061010090046001600160a01b031681565b6103ff61043e3660046119b2565b610a5c565b6102a260115481565b61029761045a3660046119b2565b610ad2565b6102a2600f5481565b610297610476366004611984565b610b06565b610297610489366004611ad0565b610b18565b61029761049c3660046119b2565b610b4c565b6102976104af366004611984565b610b80565b6003546102c8906001600160a01b031681565b6103ff6104d53660046119b2565b610bb4565b6102976104e8366004611aed565b610bbf565b6102976104fb366004611ad0565b610bd6565b61029761050e366004611aed565b610c0a565b61051b610c1d565b6040516102ac9190611b19565b6102976105363660046119b2565b610ccc565b6102a260085481565b6002546102c8906001600160a01b031681565b6102a2600c5481565b61056961271081565b60405163ffffffff90911681526020016102ac565b61029761058c3660046119b2565b610d89565b600a546102c8906001600160a01b031681565b6102976105b23660046119b2565b610dd2565b6102976105c53660046119b2565b610e06565b6012546103ff9060ff1681565b6102976105e5366004611a1b565b610e18565b6001546001600160a01b031633146106155760405163070545c960e51b815260040160405180910390fd5b61061e81610ea6565b50565b6002546001600160a01b0316331461064c57604051639ba0305d60e01b815260040160405180910390fd5b610654610ee2565b565b6001546001600160a01b031633146106815760405163070545c960e51b815260040160405180910390fd5b61061e81610f40565b61069333610f98565b61061e81610fda565b6106a533610f98565b8281146106c5576040516381e4d28d60e01b815260040160405180910390fd5b60005b8381101561072a576107188585838181106106e5576106e5611b66565b90506020020160208101906106fa91906119b2565b84848481811061070c5761070c611b66565b90506020020135611060565b8061072281611b92565b9150506106c8565b5050505050565b6001546001600160a01b0316331461075c5760405163070545c960e51b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b03831617905550565b60006107846110f6565b60125490915061010090046001600160a01b031633146107b7576040516332ca9ab360e11b815260040160405180910390fd5b6000601260019054906101000a90046001600160a01b03166001600160a01b031663fc9c8d396040518163ffffffff1660e01b8152600401602060405180830381865afa15801561080c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108309190611bab565b905061083b81611115565b60095460ff161561085f576040516313d0ff5960e31b815260040160405180910390fd5b61086883611132565b60006108726110f6565b600a54600b549192506000916001600160a01b0390911690632248e82d90859061089c8689611bc8565b6108a69190611bdf565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa1580156108ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109139190611bf7565b600c54909150612710906109279083611c10565b6109319190611c2f565b6009546040516308a336b960e11b81526001600160a01b03868116600483015260248201849052929350610100909104909116906311466d7290604401600060405180830381600087803b15801561098857600080fd5b505af115801561099c573d6000803e3d6000fd5b5050600b54604080518881526020810187905280820192909252517f5b3acbf5cbe55940e1bd9235bb985ccca97e9028d7489290f08e6504e76b88d39350908190036060019150a15050505050565b6001546001600160a01b03163314610a165760405163070545c960e51b815260040160405180910390fd5b61061e816111b5565b6001546001600160a01b03163314610a4a5760405163070545c960e51b815260040160405180910390fd5b610a568484848461120b565b50505050565b60008054604051631960d2b360e21b81526001600160a01b038481166004830152909116906365834acc906024015b602060405180830381865afa158015610aa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acc9190611c51565b92915050565b6001546001600160a01b03163314610afd5760405163070545c960e51b815260040160405180910390fd5b61061e81611285565b610b0f33610f98565b61061e816112d3565b6001546001600160a01b03163314610b435760405163070545c960e51b815260040160405180910390fd5b61061e816112f9565b6001546001600160a01b03163314610b775760405163070545c960e51b815260040160405180910390fd5b61061e8161133a565b6001546001600160a01b03163314610bab5760405163070545c960e51b815260040160405180910390fd5b61061e81611390565b6000610acc826113c5565b610bc833610f98565b610bd28282611412565b5050565b6001546001600160a01b03163314610c015760405163070545c960e51b815260040160405180910390fd5b61061e8161149b565b610c1333610f98565b610bd28282611060565b6060610c296004611507565b67ffffffffffffffff811115610c4157610c41611c6e565b604051908082528060200260200182016040528015610c6a578160200160208202803683370190505b50905060005b610c7a6004611507565b811015610cc857610c8c600482611511565b828281518110610c9e57610c9e611b66565b6001600160a01b039092166020928302919091019091015280610cc081611b92565b915050610c70565b5090565b60125461010090046001600160a01b03163314610cfc576040516332ca9ab360e11b815260040160405180910390fd5b6000601260019054906101000a90046001600160a01b03166001600160a01b031663fc9c8d396040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d759190611bab565b9050610d8081610f98565b610bd282611524565b6001546001600160a01b03163314610db45760405163070545c960e51b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b03831617905550565b6001546001600160a01b03163314610dfd5760405163070545c960e51b815260040160405180910390fd5b61061e81611566565b610e0f33610f98565b61061e81611524565b610e2133610f98565b828114610e41576040516381e4d28d60e01b815260040160405180910390fd5b60005b8381101561072a57610e94858583818110610e6157610e61611b66565b9050602002016020810190610e7691906119b2565b848484818110610e8857610e88611b66565b90506020020135611412565b80610e9e81611b92565b915050610e44565b600d8190556040518181527fad852bc3e1d8ed93d9b2d9290bdb1d945c12994fd7b826f5ff91ec56245aefda906020015b60405180910390a150565b60028054600180546001600160a01b0383166001600160a01b031991821681179092559091169091556040519081527f5d5d6e01b731c3e68060f7fe13156f6197d4aeffc2d6f498e34c717ae616b7349060200160405180910390a1565b600d54811115610f635760405163cd9ba70160e01b815260040160405180910390fd5b600c8190556040518181527f2985ceccbff6f8695faca980a17eb9a590d2f080d024f944d3c7743ba038c39990602001610ed7565b6001546001600160a01b03828116911614801590610fbc5750610fba81610a5c565b155b1561061e576040516306a22f2960e01b815260040160405180910390fd5b610fe56004826115e9565b61100257604051638716f5eb60e01b815260040160405180910390fd5b6001600160a01b03811660009081526006602052604081205561102660048261160b565b506040516001600160a01b03821681527f09a1db4b80c32706328728508c941a6b954f31eb5affd32f236c1fd405f8fea490602001610ed7565b61106b6004836115e9565b156110895760405163165e236760e01b815260040160405180910390fd5b6001600160a01b0382166000908152600660205260409020819055604080516001600160a01b0384168152602081018390527f2f564a83158ad1831793ad3e69257b52f39ece5d49cb0d8746708ecb9ef964da910160405180910390a16110f1600483611620565b505050565b6000603f5a611106906040611c10565b6111109190611c2f565b905090565b60125460ff16156111295761112981611635565b61061e8161165e565b61113b816113c5565b611158576040516398ae0b2160e01b815260040160405180910390fd5b6001600160a01b038116600090815260076020526040902042905561117c81611718565b6040516001600160a01b03821681527fac848b4596fbd35b139e8ee158748a1c8091becf3e830c628b4a79ad869d170290602001610ed7565b60098054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527f0fec338132ef1fa68cd11242357e5e5e5af67dfd0c957b53ef411bca535817ef90602001610ed7565b600e80546001600160a01b0319166001600160a01b038616908117909155600f8490556010839055601182905560408051918252602082018590528101839052606081018290527fadc260414d0381ec9727c6f819aa0ebe789ad81016c176765f40d3bc301e5d6b9060800160405180910390a150505050565b600a80546001600160a01b0319166001600160a01b0383169081179091556040519081527f77e14ebc8982ca2b21d8410b77a6ca8a857864dfab5d337f154fbacea73c119190602001610ed7565b806000036112f457604051636972b64d60e01b815260040160405180910390fd5b600855565b6012805460ff19168215159081179091556040519081527fa9bf0ee725a8887f07a03c36e33aa100bb0218d44b9fff855be8504c480ab99b90602001610ed7565b60128054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527f4803a65acc131d65526972ad19dbfa7490ed1f24f6ece0c71f4898d86a01b69b90602001610ed7565b600b8190556040518181527f6c434ba0e7a3588c2330d8f479f247d9269f069a8d630dbb2cb60a7382a487f090602001610ed7565b60006113d082611773565b6113dc57506000919050565b816001600160a01b031663ed882c2b6113f4846117e5565b6040518263ffffffff1660e01b8152600401610a8b91815260200190565b61141d6004836115e9565b61143a57604051638716f5eb60e01b815260040160405180910390fd5b6001600160a01b0382166000908152600660205260409020819055604080516001600160a01b0384168152602081018390527fe4471c38177bd412e0358beccddbe74bad9465520f4f24a76c013bd404b0b0de910160405180910390a15050565b60095481151560ff9091161515036114c6576040516337fe120d60e21b815260040160405180910390fd5b6009805460ff19168215159081179091556040519081527f878ac8a2ca79520471f8f3c8494fa802c03ce3bf034252aad7f22318984fdbdb90602001610ed7565b6000610acc825490565b600061151d8383611818565b9392505050565b61152d81611718565b6040516001600160a01b03821681527fee8d688761ac1d0fda49e2ac999f0e46b3beaf16857a8e8905aeab2987dc8d3890602001610ed7565b6001600160a01b03811661158d5760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b038381169182179092556001546040805191909316815260208101919091527f6353ec38ac394f8be94bfafcdd3580d356470599059eaeebedc3207e1cc03dec9101610ed7565b6001600160a01b0381166000908152600183016020526040812054151561151d565b600061151d836001600160a01b038416611842565b600061151d836001600160a01b038416611935565b6001600160a01b038116321461061e57604051639f8129d160e01b815260040160405180910390fd5b600954600e54600f54601054601154604051637cea367960e11b81526001600160a01b0387811660048301529485166024820152604481019390935260648301919091526084820152610100909204169063f9d46cf29060a4016020604051808303816000875af11580156116d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fb9190611c51565b61061e57604051636959565560e11b815260040160405180910390fd5b60035460405163072e008f60e11b81526001600160a01b03838116600483015290911690630e5c011e90602401600060405180830381600087803b15801561175f57600080fd5b505af115801561072a573d6000803e3d6000fd5b60006117806004836115e9565b61179d57604051638716f5eb60e01b815260040160405180910390fd5b60085415806117d057506008546001600160a01b0383166000908152600760205260409020546117cd9190611bdf565b42115b156117dd57506001919050565b506000919050565b6001600160a01b03811660009081526006602052604081205480820361180e5750600092915050565b61151d4882611c10565b600082600001828154811061182f5761182f611b66565b9060005260206000200154905092915050565b6000818152600183016020526040812054801561192b576000611866600183611bc8565b855490915060009061187a90600190611bc8565b90508181146118df57600086600001828154811061189a5761189a611b66565b90600052602060002001549050808760000184815481106118bd576118bd611b66565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806118f0576118f0611c84565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610acc565b6000915050610acc565b600081815260018301602052604081205461197c57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610acc565b506000610acc565b60006020828403121561199657600080fd5b5035919050565b6001600160a01b038116811461061e57600080fd5b6000602082840312156119c457600080fd5b813561151d8161199d565b60008083601f8401126119e157600080fd5b50813567ffffffffffffffff8111156119f957600080fd5b6020830191508360208260051b8501011115611a1457600080fd5b9250929050565b60008060008060408587031215611a3157600080fd5b843567ffffffffffffffff80821115611a4957600080fd5b611a55888389016119cf565b90965094506020870135915080821115611a6e57600080fd5b50611a7b878288016119cf565b95989497509550505050565b60008060008060808587031215611a9d57600080fd5b8435611aa88161199d565b966020860135965060408601359560600135945092505050565b801515811461061e57600080fd5b600060208284031215611ae257600080fd5b813561151d81611ac2565b60008060408385031215611b0057600080fd5b8235611b0b8161199d565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b81811015611b5a5783516001600160a01b031683529284019291840191600101611b35565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611ba457611ba4611b7c565b5060010190565b600060208284031215611bbd57600080fd5b815161151d8161199d565b600082821015611bda57611bda611b7c565b500390565b60008219821115611bf257611bf2611b7c565b500190565b600060208284031215611c0957600080fd5b5051919050565b6000816000190483118215151615611c2a57611c2a611b7c565b500290565b600082611c4c57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611c6357600080fd5b815161151d81611ac2565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603160045260246000fdfea26469706673582212204a835b14df49a425243762b6ae5dfb978395477804b405fb5332c16813e850f364736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addStrategies(address[],uint256[])": {
        "params": {
          "_requiredAmount": "Array of amount of gas that each strategy requires to execute",
          "_strategies": "Array of addresses of strategies to add"
        }
      },
      "addStrategy(address,uint256)": {
        "params": {
          "_requiredAmount": "Amount of gas that the strategy requires to execute",
          "_strategy": "Address of the strategy to add"
        }
      },
      "forceWork(address)": {
        "params": {
          "_strategy": "Address of the strategy to be worked"
        }
      },
      "forceWorkUnsafe(address)": {
        "params": {
          "_strategy": "Address of the strategy to be worked"
        }
      },
      "removeStrategy(address)": {
        "params": {
          "_strategy": "Address of the strategy to remove"
        }
      },
      "setGasBonus(uint256)": {
        "params": {
          "_gasBonus": "New amount of gas to add to cover unaccounted gas"
        }
      },
      "setGasMultiplier(uint256)": {
        "params": {
          "_gasMultiplier": "New multiplier that boosts gas record to calculate the keeper reward"
        }
      },
      "setKeep3r(address)": {
        "params": {
          "_keep3r": "Address of the new Keep3r contract"
        }
      },
      "setKeep3rHelper(address)": {
        "params": {
          "_keep3rHelper": "Address of the new Keep3rHelper contract"
        }
      },
      "setKeep3rRequirements(address,uint256,uint256,uint256)": {
        "params": {
          "_age": "Amount of seconds since keeper registration required to work the job",
          "_bond": "Address of the token required to bond to work the job",
          "_earned": "Amount of KP3R earnings required to work the job",
          "_minBond": "Amount of tokens required to bond to work the job"
        }
      },
      "setMaxMultiplier(uint256)": {
        "params": {
          "_maxMultiplier": "New maximum acceptable gasMultiplier to be set"
        }
      },
      "setMechanicsRegistry(address)": {
        "params": {
          "_mechanicsRegistry": "Address of the new MechanicsRegistry contract"
        }
      },
      "setOnlyEOA(bool)": {
        "params": {
          "_onlyEOA": "Whether the keeper is required to be an EOA or not"
        }
      },
      "setPause(bool)": {
        "params": {
          "_paused": "Whether the contract should be paused or not"
        }
      },
      "setPendingGovernor(address)": {
        "params": {
          "_pendingGovernor": "Address of the proposed new governor"
        }
      },
      "setStealthRelayer(address)": {
        "params": {
          "_stealthRelayer": "Address of the new StealthRelayer contract"
        }
      },
      "setV2Keeper(address)": {
        "params": {
          "_v2Keeper": "Address of the new v2Keeper to set"
        }
      },
      "setWorkCooldown(uint256)": {
        "params": {
          "_workCooldown": "Amount of seconds to wait until a strategy can be worked again"
        }
      },
      "strategies()": {
        "returns": {
          "_strategies": "List of added strategies"
        }
      },
      "updateRequiredAmount(address,uint256)": {
        "params": {
          "_requiredAmount": "New amount of gas that te strategy requires to execute",
          "_strategy": "Address of the strategy to modify"
        }
      },
      "updateRequiredAmounts(address[],uint256[])": {
        "params": {
          "_requiredAmounts": "Array of new amounts of gas that each strategy requires to execute",
          "_strategies": "Array of addresses of strategies to modify"
        }
      },
      "work(address)": {
        "params": {
          "_strategy": "Address of the strategy to be worked"
        }
      },
      "workable(address)": {
        "params": {
          "_strategy": "Address of the strategy to query"
        },
        "returns": {
          "_isWorkable": "Whether the queried strategy is workable or not"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "KeeperNotValid()": [
        {
          "notice": "Throws when a keeper fails the validation"
        }
      ],
      "NoChangeInPause()": [
        {
          "notice": "Throws when governor tries to switch pause to the same state as before"
        }
      ],
      "OnlyEOA()": [
        {
          "notice": "Throws when keeper is not tx.origin"
        }
      ],
      "OnlyGovernor()": [
        {
          "notice": "Throws if a non-governor user tries to call a OnlyGovernor function"
        }
      ],
      "OnlyGovernorOrMechanic()": [
        {
          "notice": "Throws when a OnlyGovernorOrMechanic function is called from an unknown address"
        }
      ],
      "OnlyPendingGovernor()": [
        {
          "notice": "Throws if a non-pending-governor user tries to call a OnlyPendingGovernor function"
        }
      ],
      "OnlyStealthRelayer()": [
        {
          "notice": "Throws when a OnlyStealthRelayer function is called from an unknown address"
        }
      ],
      "Paused()": [
        {
          "notice": "Throws when a keeper tries to work a paused contract"
        }
      ],
      "StrategyAlreadyAdded()": [
        {
          "notice": "Throws if the strategy being added has already been added"
        }
      ],
      "StrategyNotAdded()": [
        {
          "notice": "Throws if the strategy being summoned is not added"
        }
      ],
      "StrategyNotWorkable()": [
        {
          "notice": "Throws if a keeper tries to work a non-workable strategy"
        }
      ],
      "WrongLengths()": [
        {
          "notice": "Throws if a set of correlated input param arrays differ in lengths"
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "Throws if a variable is assigned to the zero address"
        }
      ],
      "ZeroCooldown()": [
        {
          "notice": "Throws if the cooldown is being set to 0"
        }
      ]
    },
    "events": {
      "ForceWorked(address)": {
        "notice": "Emitted when a strategy is force-worked by governor or mechanic"
      },
      "GasBonusSet(uint256)": {
        "notice": "Emitted when a new gas bonus amount is set"
      },
      "GasMetered(uint256,uint256,uint256)": {
        "notice": "Emitted when a metered job is worked"
      },
      "GasMultiplierSet(uint256)": {
        "notice": "Emitted when a new gas bonus multiplier is set"
      },
      "Keep3rHelperSet(address)": {
        "notice": "Emitted when a new Keep3rHelper contract is set"
      },
      "Keep3rRequirementsSet(address,uint256,uint256,uint256)": {
        "notice": "Emitted when a new set of requirements is set"
      },
      "Keep3rSet(address)": {
        "notice": "Emitted when a new Keep3r contract is set"
      },
      "KeeperWorked(address)": {
        "notice": "Emitted when a strategy is worked"
      },
      "MaxMultiplierSet(uint256)": {
        "notice": "Emitted when a new gas bonus multiplier maximum is set"
      },
      "OnlyEOASet(bool)": {
        "notice": "Emitted when onlyEOA is set"
      },
      "PauseSet(bool)": {
        "notice": "Emitted when the contract pause is switched"
      },
      "PendingGovernorAccepted(address)": {
        "notice": "Emitted when a new governor is set"
      },
      "PendingGovernorSet(address,address)": {
        "notice": "Emitted when a new pending governor is set"
      },
      "StealthRelayerSet(address)": {
        "notice": "Emitted when a new StealthRelayer contract is set"
      },
      "StrategyAdded(address,uint256)": {
        "notice": "Emitted when a new strategy is added"
      },
      "StrategyModified(address,uint256)": {
        "notice": "Emitted when a strategy is modified"
      },
      "StrategyRemoved(address)": {
        "notice": "Emitted when a strategy is removed"
      }
    },
    "kind": "user",
    "methods": {
      "acceptPendingGovernor()": {
        "notice": "Allows a proposed governor to accept the governance"
      },
      "forceWork(address)": {
        "notice": "Function to be called by governor or mechanics that triggers the execution of the given strategyThis function bypasses the workable checks"
      },
      "forceWorkUnsafe(address)": {
        "notice": "Function to be called by governor or mechanic that triggers the execution of the given strategyThis function bypasses the stealth relayer checks"
      },
      "setGasBonus(uint256)": {
        "notice": "Allows governor to set a new gas bonus amount"
      },
      "setGasMultiplier(uint256)": {
        "notice": "Allows governor to set a new gas multiplier"
      },
      "setKeep3r(address)": {
        "notice": "Allows governor to set a new Keep3r contract"
      },
      "setKeep3rHelper(address)": {
        "notice": "Allows governor to set a new Keep3rHelper contract"
      },
      "setKeep3rRequirements(address,uint256,uint256,uint256)": {
        "notice": "Allows the governor to set new requirements to work the job"
      },
      "setMaxMultiplier(uint256)": {
        "notice": "Allows governor to set a new gas multiplier maximum"
      },
      "setMechanicsRegistry(address)": {
        "notice": "Allows governor to set a new MechanicsRegistry contract"
      },
      "setOnlyEOA(bool)": {
        "notice": "Allows governor to set the onlyEOA condition"
      },
      "setPause(bool)": {
        "notice": "Allows governor to pause or unpause the contract"
      },
      "setPendingGovernor(address)": {
        "notice": "Allows a governor to propose a new governor"
      },
      "setStealthRelayer(address)": {
        "notice": "Allows governor to set a new StealthRelayer contract"
      },
      "work(address)": {
        "notice": "Function to be called by the keeper that triggers the execution of the given strategy"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1234,
        "contract": "solidity/contracts/HarvestV2Keep3rStealthJob.sol:HarvestV2Keep3rStealthJob",
        "label": "_mechanicsRegistry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IMechanicsRegistry)1341"
      },
      {
        "astId": 2976,
        "contract": "solidity/contracts/HarvestV2Keep3rStealthJob.sol:HarvestV2Keep3rStealthJob",
        "label": "governor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2979,
        "contract": "solidity/contracts/HarvestV2Keep3rStealthJob.sol:HarvestV2Keep3rStealthJob",
        "label": "pendingGovernor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1718,
        "contract": "solidity/contracts/HarvestV2Keep3rStealthJob.sol:HarvestV2Keep3rStealthJob",
        "label": "v2Keeper",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IV2Keeper)6281"
      },
      {
        "astId": 1721,
        "contract": "solidity/contracts/HarvestV2Keep3rStealthJob.sol:HarvestV2Keep3rStealthJob",
        "label": "_availableStrategies",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(AddressSet)933_storage"
      },
      {
        "astId": 1726,
        "contract": "solidity/contracts/HarvestV2Keep3rStealthJob.sol:HarvestV2Keep3rStealthJob",
        "label": "requiredAmount",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1731,
        "contract": "solidity/contracts/HarvestV2Keep3rStealthJob.sol:HarvestV2Keep3rStealthJob",
        "label": "lastWorkAt",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1734,
        "contract": "solidity/contracts/HarvestV2Keep3rStealthJob.sol:HarvestV2Keep3rStealthJob",
        "label": "workCooldown",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3812,
        "contract": "solidity/contracts/HarvestV2Keep3rStealthJob.sol:HarvestV2Keep3rStealthJob",
        "label": "paused",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 3206,
        "contract": "solidity/contracts/HarvestV2Keep3rStealthJob.sol:HarvestV2Keep3rStealthJob",
        "label": "keep3r",
        "offset": 1,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 3281,
        "contract": "solidity/contracts/HarvestV2Keep3rStealthJob.sol:HarvestV2Keep3rStealthJob",
        "label": "keep3rHelper",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 3285,
        "contract": "solidity/contracts/HarvestV2Keep3rStealthJob.sol:HarvestV2Keep3rStealthJob",
        "label": "gasBonus",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3289,
        "contract": "solidity/contracts/HarvestV2Keep3rStealthJob.sol:HarvestV2Keep3rStealthJob",
        "label": "gasMultiplier",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3297,
        "contract": "solidity/contracts/HarvestV2Keep3rStealthJob.sol:HarvestV2Keep3rStealthJob",
        "label": "maxMultiplier",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3103,
        "contract": "solidity/contracts/HarvestV2Keep3rStealthJob.sol:HarvestV2Keep3rStealthJob",
        "label": "requiredBond",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 3107,
        "contract": "solidity/contracts/HarvestV2Keep3rStealthJob.sol:HarvestV2Keep3rStealthJob",
        "label": "requiredMinBond",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 3110,
        "contract": "solidity/contracts/HarvestV2Keep3rStealthJob.sol:HarvestV2Keep3rStealthJob",
        "label": "requiredEarnings",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 3113,
        "contract": "solidity/contracts/HarvestV2Keep3rStealthJob.sol:HarvestV2Keep3rStealthJob",
        "label": "requiredAge",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 3759,
        "contract": "solidity/contracts/HarvestV2Keep3rStealthJob.sol:HarvestV2Keep3rStealthJob",
        "label": "onlyEOA",
        "offset": 0,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 3537,
        "contract": "solidity/contracts/HarvestV2Keep3rStealthJob.sol:HarvestV2Keep3rStealthJob",
        "label": "stealthRelayer",
        "offset": 1,
        "slot": "18",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IMechanicsRegistry)1341": {
        "encoding": "inplace",
        "label": "contract IMechanicsRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IV2Keeper)6281": {
        "encoding": "inplace",
        "label": "contract IV2Keeper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)933_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 932,
            "contract": "solidity/contracts/HarvestV2Keep3rStealthJob.sol:HarvestV2Keep3rStealthJob",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)632_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)632_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 627,
            "contract": "solidity/contracts/HarvestV2Keep3rStealthJob.sol:HarvestV2Keep3rStealthJob",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 631,
            "contract": "solidity/contracts/HarvestV2Keep3rStealthJob.sol:HarvestV2Keep3rStealthJob",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}